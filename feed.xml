<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.7">Jekyll</generator><link href="https://wouterj.nl/feed.xml" rel="self" type="application/atom+xml" /><link href="https://wouterj.nl/" rel="alternate" type="text/html" /><updated>2022-01-08T17:14:38+00:00</updated><id>https://wouterj.nl/feed.xml</id><title type="html">Wouter J</title><author><name>Wouter de Jong</name></author><entry><title type="html">Using the SecurityBundle in Symfony 6</title><link href="https://wouterj.nl/2021/12/security-winterworld21" rel="alternate" type="text/html" title="Using the SecurityBundle in Symfony 6" /><published>2021-12-10T00:00:00+00:00</published><updated>2021-12-10T00:00:00+00:00</updated><id>https://wouterj.nl/2021/12/security-winterworld21</id><content type="html" xml:base="https://wouterj.nl/2021/12/security-winterworld21">&lt;p&gt;At SymfonyWorld Winter 2021, I talked about using the new Symfony
authentication system in your applications in Symfony 6. We discussed
the important changes to the Security component, what we tried to
improve with each change, and how you can use these to make a more
secure application quicker.&lt;/p&gt;

&lt;embed src=&quot;/assets/uploads/sfwinterworld21-talk.pdf&quot; class=&quot;post__slides&quot; /&gt;

&lt;h2 id=&quot;references--features&quot;&gt;References &amp;amp; Features&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;The security makers in &lt;a href=&quot;https://symfony.com/bundles/SymfonyMakerBundle/current/index.html&quot;&gt;Symfony MakerBundle&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://symfony.com/doc/current/security/#the-user&quot;&gt;Minimalized &lt;code class=&quot;highlighter-shiki&quot;&gt;UserInterface&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;SymfonyCasts &lt;a href=&quot;https://github.com/SymfonyCasts/verify-email-bundle&quot;&gt;VerifyEmailBundle&lt;/a&gt;
and &lt;a href=&quot;https://github.com/SymfonyCasts/reset-password-bundle&quot;&gt;ResetPasswordBundle&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Built-in &lt;a href=&quot;https://symfony.com/doc/current/security/#form-login&quot;&gt;form login authenticator&lt;/a&gt; and
&lt;a href=&quot;https://symfony.com/doc/current/security/#json-login&quot;&gt;json login authenticator&lt;/a&gt;
(&lt;a href=&quot;https://symfony.com/doc/current/security.html#authenticating-users&quot;&gt;all built-in authenticators&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;The new Security profiler&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lexik/LexikJWTAuthenticationBundle&quot;&gt;LexikJWTAuthenticationBundle&lt;/a&gt;,
&lt;a href=&quot;https://github.com/hslavich/OneloginSamlBundle&quot;&gt;OneloginSamlBundle&lt;/a&gt;,
&lt;a href=&quot;https://github.com/web-auth/webauthn-symfony-bundle&quot;&gt;WebauthnSymfonyBundle&lt;/a&gt;,
&lt;a href=&quot;https://github.com/knpuniversity/oauth2-client-bundle&quot;&gt;KnpUOauth2ClientBundle&lt;/a&gt; and
&lt;a href=&quot;https://symfony.com/bundles/SchebTwoFactorBundle/current/index.html&quot;&gt;SchebTwoFactorBundle&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The new &lt;a href=&quot;https://symfony.com/doc/current/security/#security-events&quot;&gt;Security event cycle&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The new &lt;a href=&quot;https://symfony.com/blog/new-in-symfony-5-4-profiler-improvements#more-security-information-in-the-profiler&quot;&gt;&lt;code class=&quot;highlighter-shiki&quot;&gt;debug:firewall&lt;/code&gt; command&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Symfony &lt;a href=&quot;https://symfony.com/doc/current/security/custom_authenticator.html#security-passport&quot;&gt;security Passports&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The new &lt;code class=&quot;highlighter-shiki&quot;&gt;required_badges&lt;/code&gt; setting&lt;/li&gt;
  &lt;li&gt;Implementing &lt;a href=&quot;https://symfony.com/doc/current/security/custom_authenticator.html&quot;&gt;custom authenticators&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://symfony.com/doc/5.2/security/experimental_authenticators.html&quot;&gt;Using the new authentication system in Symfony 5&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;All code of this talk in an example application: &lt;a href=&quot;https://github.com/wouterj-nl/security-winterworld21&quot;&gt;https://github.com/wouterj-nl/security-winterworld21&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Wouter de Jong</name></author><category term="talk" /><category term="symfony" /><summary type="html">At SymfonyWorld Winter 2021, I talked about using the new Symfony authentication system in your applications in Symfony 6. We discussed the important changes to the Security component, what we tried to improve with each change, and how you can use these to make a more secure application quicker.</summary></entry><entry><title type="html">Deprecations are not like E_ERROR, E_WARNING, and E_NOTICE</title><link href="https://wouterj.nl/2021/11/deprecations-are-not-errors" rel="alternate" type="text/html" title="Deprecations are not like E_ERROR, E_WARNING, and E_NOTICE" /><published>2021-11-13T00:00:00+00:00</published><updated>2021-11-13T00:00:00+00:00</updated><id>https://wouterj.nl/2021/11/deprecations-are-not-errors</id><content type="html" xml:base="https://wouterj.nl/2021/11/deprecations-are-not-errors">&lt;p&gt;Every now and then, there seems to be a lot of fuss in the PHP community
about deprecations. In these discussions, deprecations are often
discussed as if they are fatal errors. I think that is very wrong. Let’s
reduce our expectations of deprecations. It’ll make everyones live much
less stressful.&lt;/p&gt;

&lt;h2 id=&quot;why-we-were-afraid-of-change-in-the-past&quot;&gt;Why we were Afraid of Change in the Past&lt;/h2&gt;

&lt;aside class=&quot;side&quot; data-type=&quot;side note&quot;&gt;
  &lt;p&gt;I can’t think of a world without deprecations and backwards
compatibility nowadays. The PHP community has matured fast. The
semantic versioning specification, which I think has ignited the
backwards compatibility movement, was published only 8 years ago
in 2013. In this same year, Symfony triggered its first ever deprecation
notice.&lt;/p&gt;
&lt;/aside&gt;

&lt;p&gt;In the past, the only way to know about a change in the next version was
by reading the CHANGELOGs. Every change required you to manually check
if your code was affected.&lt;/p&gt;

&lt;p&gt;Mind you, even Composer was not a thing 8 years ago. Most applications
would just copy past the vendor code in their project (sometimes even
altering code in the vendor).&lt;/p&gt;

&lt;p&gt;This took time, a lot of time. As a consequence, languages and
libraries were very restricted in how they could evolve.&lt;/p&gt;

&lt;h2 id=&quot;why-php-developers-are-afraid-of-any-e_-being-reported&quot;&gt;Why PHP Developers are Afraid of any &lt;code class=&quot;highlighter-shiki&quot;&gt;E_*&lt;/code&gt; being Reported&lt;/h2&gt;

&lt;p&gt;PHP had a habit of trying to “fix” incorrect code. Forgot the quotes
around a string? No worries, &lt;a href=&quot;https://3v4l.org/m0l3p&quot;&gt;PHP still interpreted it as a
string&lt;/a&gt; if the constant wasn’t found. It
triggered an &lt;code class=&quot;highlighter-shiki&quot;&gt;E_NOTICE&lt;/code&gt; to let you know that PHP found something
unexpected but tried to continue.&lt;/p&gt;

&lt;p&gt;This can produce unexpected behavior (e.g. what if you meant a constant,
but you made a typo?). As a result, PHP developers have become extremely
careful with anything being reported. Even though it’s not a direct fatal
error, many of us correctly consider notices to be something that must
be fixed.&lt;/p&gt;

&lt;p&gt;However, this also makes us very careful with &lt;code class=&quot;highlighter-shiki&quot;&gt;E_DEPRECATED&lt;/code&gt;. After all,
it’s reported and it starts with &lt;code class=&quot;highlighter-shiki&quot;&gt;E_&lt;/code&gt;. That MUST be fixed as soon as
possible, right? …right?&lt;/p&gt;

&lt;h2 id=&quot;why-deprecations-are-different&quot;&gt;Why Deprecations are Different&lt;/h2&gt;

&lt;p&gt;Deprecations are not like notices, warnings or errors. Deprecations are
the cornerstone in &lt;em&gt;smooth upgrade paths&lt;/em&gt;. This smooth upgrade path
contains a couple steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A contributor makes a backwards compatibility breaking change&lt;/li&gt;
  &lt;li&gt;The contributor introduces a “BC layer” to make sure the old API
also works. This “BC layer” triggers a deprecation, notifying that
you’re using a legacy API&lt;/li&gt;
  &lt;li&gt;In the next major version, a maintainer removes the “BC layer” and
the new API is the only available API&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This means that a &lt;em&gt;user&lt;/em&gt; can use the old API as long as they want, until
they want to upgrade to the next major version.&lt;/p&gt;

&lt;aside class=&quot;side&quot; data-type=&quot;side note&quot;&gt;
  &lt;p&gt;The smooth upgrade path is such an improvement that most maintainers
have to get used to it. Most developers love refactoring legacy bits,
and I think it’s normal to “overshoot” it at first. Maintainers will
learn from this (I’m sure the hard upgrade from Symfony 3.4 is not
repeated again).&lt;/p&gt;

  &lt;p&gt;Give them constructive feedback on what made an upgrade hard for your
applications. Don’t judge them for making changes, help them improve
further changes.&lt;/p&gt;
&lt;/aside&gt;

&lt;p&gt;A deprecation is a major help for us &lt;em&gt;users&lt;/em&gt;. Instead of being notified
only after the major release (by reading the CHANGELOG), we get notified
years or months in advance. For instance, you have at least 3 years to
fix any deprecation that Symfony gives you.&lt;/p&gt;

&lt;h2 id=&quot;you-dont-have-to-run-deprecation-free&quot;&gt;You don’t have to run Deprecation-free&lt;/h2&gt;

&lt;p&gt;Using a deprecated feature doesn’t result in unpredictable behavior,
like PHP’s notices do. They don’t signal a bug, like warnings and errors
do. They just tell you that you have some work to do before upgrading to
the next major version. That’s all!&lt;/p&gt;

&lt;p&gt;With deprecations, you can prioritize upgrade work and reserve some time
for it in a 2 or 3 year timespan. Backwards compatibility breaks are no
longer ad-hoc tasks, they become plannable tasks.&lt;/p&gt;

&lt;p&gt;Is your business busy the next few months? Fine! Your apps remain
running with tons of deprecations for months to come. There will always
be a boring week in the summer break were you can fix a couple
deprecations.&lt;/p&gt;

&lt;p&gt;Most often, when a new deprecation is introduced, the major version is not
even being worked on. For instance, if PHP triggers a deprecation now,
you’re notified of a breaking change in PHP 9. Do you know the release
date of PHP 9? I don’t (probably one or two years from now?). Is it
really worth worrying so much today about a breaking change in an
unknown future?&lt;/p&gt;

&lt;h2 id=&quot;dont-judge-your-vendor-code-for-not-running-deprecation-free&quot;&gt;Don’t Judge your Vendor Code for not running Deprecation-free&lt;/h2&gt;

&lt;p&gt;The same applies to any vendor code that your app is using. Getting
deprecation notices from a vendor library? That’s fine. You can reserve
some time and contribute a fix for one or two deprecations to the open
source project.&lt;/p&gt;

&lt;p&gt;If we all do it, the open source project will support the new major
version months before it’s even released.&lt;/p&gt;

&lt;h2 id=&quot;how-to-hide-and-log-deprecations&quot;&gt;How to Hide and Log Deprecations&lt;/h2&gt;

&lt;p&gt;If you are using the default PHP error handler, you’re left to either
hide deprecations or output them like all other errors. Symfony has a
small &lt;a href=&quot;https://github.com/symfony/error-handler&quot;&gt;&lt;code class=&quot;highlighter-shiki&quot;&gt;symfony/error-handler&lt;/code&gt;&lt;/a&gt;
package that allows you to register &lt;a href=&quot;https://php-fig.org/psr/psr-3/&quot;&gt;PSR-3 loggers&lt;/a&gt;
for a specific error level. Besides, it automatically hides
deprecations from the normal output.&lt;/p&gt;

&lt;p&gt;Using this code, all deprecations are logged to &lt;code class=&quot;highlighter-shiki&quot;&gt;deprecation.log&lt;/code&gt; and
the normal error handler is used for all other errors:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-shiki&quot;&gt;&lt;pre class=&quot;shiki-gutter&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
&lt;/pre&gt;&lt;pre class=&quot;shiki-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot; data-linenr=&quot;1&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;php&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;2&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;3&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;require_once&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt;vendor/autoload.php&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;4&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;5&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;use&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; Psr&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Log&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;AbstractLogger&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;6&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;use&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; Symfony&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Component&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;ErrorHandler&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;ErrorHandler&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;7&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;8&quot;&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;ErrorHandler&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;::&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;register&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;9&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;setDefaultLogger&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;extends&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;AbstractLogger&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;10&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;log&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;level&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;string&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;|\&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;Stringable&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;message&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;array&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;context&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;[])&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;void&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;11&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;12&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;formattedLogLine&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;sprintf&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;13&quot;&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;                &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt;[%s] %s: %s%s&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;PHP_EOL&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;14&quot;&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;                date&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt;Y-m-dTH:i:s.uP&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;),&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;15&quot;&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;                &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;level&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;16&quot;&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;                &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;string&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;message&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;17&quot;&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;                &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;context&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt;exception&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;??&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;false&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;instanceof&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;Throwable&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;18&quot;&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;                    &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;?&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;sprintf&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt; in %s:%s&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;context&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt;exception&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;getFile&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(),&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;context&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt;exception&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;getLine&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;())&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;19&quot;&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;                    &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;20&quot;&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;21&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;22&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;file_put_contents&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;__DIR__&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt;/deprecations.log&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;formattedLogLine&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;FILE_APPEND&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;23&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;24&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;},&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;E_DEPRECATED&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;E_USER_DEPRECATED&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;25&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;26&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;27&quot;&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// &amp;quot;null&amp;quot; argument deprecated as of PHP 8.1&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;28&quot;&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;var_dump&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;str_contains&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt;foo&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;))&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;take-homes&quot;&gt;Take Home’s&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Don’t try to run deprecation free until you want to upgrade to a new
major&lt;/li&gt;
  &lt;li&gt;Don’t judge maintainers triggering deprecations, thank them for
letting you know about a big change way in advance&lt;/li&gt;
  &lt;li&gt;Deprecations make upgrade tasks plannable, instead of ad-hoc&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Wouter de Jong</name></author><category term="article" /><category term="backwards-compatibility" /><summary type="html">Every now and then, there seems to be a lot of fuss in the PHP community about deprecations. In these discussions, deprecations are often discussed as if they are fatal errors. I think that is very wrong. Let’s reduce our expectations of deprecations. It’ll make everyones live much less stressful.</summary></entry><entry><title type="html">Symfony 6: PHP 8 Native Types &amp;amp; Why we Need YOU</title><link href="https://wouterj.nl/2021/09/symfony-6-native-typing" rel="alternate" type="text/html" title="Symfony 6: PHP 8 Native Types &amp;amp; Why we Need YOU" /><published>2021-09-10T00:00:00+00:00</published><updated>2021-09-10T00:00:00+00:00</updated><id>https://wouterj.nl/2021/09/symfony-6-native-typing</id><content type="html" xml:base="https://wouterj.nl/2021/09/symfony-6-native-typing">&lt;p&gt;A very exciting time is coming with the biggest change for Symfony since
Symfony 2.0: Symfony 6 has native PHP types on all its methods where it
is possible. This will be a great push towards type safety in the PHP
open source communities! &lt;a href=&quot;https://github.com/sponsors/nicolas-grekas&quot;&gt;Nicolas&lt;/a&gt; and
&lt;a href=&quot;https://github.com/derrabus&quot;&gt;Alexander&lt;/a&gt; have been working on and off for 2 years to create
the best upgrade experience possible.&lt;br /&gt;
Now, 2.5 months before the stable release, it is &lt;em&gt;YOUR&lt;/em&gt; time to shine!
Especially if you maintain any open source project (not even directly
linked to Symfony), we would love to hear from you to make sure the
upgrade isn’t dramatically hard.&lt;/p&gt;

&lt;p&gt;As of Symfony 5.4, the debug class loader (which is used in Symfony
applications in the dev/test env) will check return type compatibility
and warn you if a method is incompatible. Even more… it can fix it
automatically for you! &lt;a href=&quot;https://symfony.com/doc/5.4/setup/upgrade_major.html#upgrading-to-symfony-6-add-native-return-types&quot;&gt;Read more about this feature in the Symfony
docs.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;symfony-applications-upgrade-plan&quot;&gt;Symfony Applications Upgrade Plan&lt;/h2&gt;

&lt;p&gt;The upgrade plan is slightly different for open source packages and
applications. This section describes your upgrade plan if you’re
building applications using the Symfony framework (or only some
components).&lt;/p&gt;

&lt;p&gt;The techniques and tools created to make this experience as smooth as
possible are brand-new. Please install 5.4-dev now and let us &lt;a href=&quot;https://github.com/symfony/symfony/issues/new/choose&quot;&gt;know about
any issue&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-shiki&quot;&gt;&lt;pre class=&quot;shiki-gutter&quot;&gt;1
2
3
&lt;/pre&gt;&lt;pre class=&quot;shiki-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot; data-linenr=&quot;1&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;$ composer config minimum-stability dev&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;2&quot;&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;# now, modify all Symfony constraints to &amp;quot;^5.4&amp;quot; in &amp;quot;composer.json&amp;quot;, then:&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;3&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;$ composer update &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt;symfony/*&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;when-upgrading-to-symfony-54&quot;&gt;When upgrading to Symfony 5.4&lt;/h3&gt;

&lt;p&gt;First, upgrade to Symfony 5.4. Besides fixing all “normal” deprecations,
you also need to fix some type declarations.&lt;/p&gt;

&lt;p&gt;In PHP, it is possible to define a return type when the parent
declaration doesn’t define it (yet):&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-shiki&quot;&gt;&lt;pre class=&quot;shiki-gutter&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;pre class=&quot;shiki-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot; data-linenr=&quot;1&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;interface&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; UserInterface&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;2&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;3&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;getRoles&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;4&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;5&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;6&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;User&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;implements&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;UserInterface&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;7&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;8&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// valid!&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;9&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;getRoles&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;array&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;10&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;11&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;12&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;13&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;At the other hand, you must define a return type if your parent does
(remember, Symfony 6 will define return types!). This means that 5.4 is
your time to add return types to all methods (especially those
overriding or implementing methods from Symfony).&lt;/p&gt;

&lt;p&gt;Symfony provides a small utility in the &lt;a href=&quot;https://symfony.com/components/ErrorHandler&quot;&gt;&lt;code class=&quot;highlighter-shiki&quot;&gt;symfony/error-handler&lt;/code&gt; component&lt;/a&gt;
to automatically add the required return types. First, generate a
complete classmap of your application using Composer. Then, run the
utility:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-shiki&quot;&gt;&lt;pre class=&quot;shiki-gutter&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;pre class=&quot;shiki-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot; data-linenr=&quot;1&quot;&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;# (1) Make sure &amp;quot;exclude-from-classmap&amp;quot; is not set in your &amp;quot;composer.json&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;2&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;3&quot;&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;# (2) Generate the classmap (&amp;quot;-o&amp;quot; is important!)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;4&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;$ composer dump-autoload -o&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;5&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;6&quot;&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;# (3) Run the patch script&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;7&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;$ ./vendor/bin/patch-type-declarations&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Once you’ve fixed them (and running this script above will do it all for
you), you’re ready to upgrade to Symfony 6!&lt;/p&gt;

&lt;h3 id=&quot;when-using-symfony-6x&quot;&gt;When using Symfony 6.x&lt;/h3&gt;

&lt;p&gt;After upgrading to Symfony 6.0, you can start adding parameter types.
Parameter type compatibility is inverted compared to return types: a
child may not set the type if the parent already does, but a child
cannot set the type before the parent:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-shiki&quot;&gt;&lt;pre class=&quot;shiki-gutter&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;pre class=&quot;shiki-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot; data-linenr=&quot;1&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;interface&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; FormTypeGuesserInterface&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;2&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;3&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;guessType&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;property&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;4&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;5&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;6&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;CustomTypeGuesser&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;implements&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;UserInterface&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;7&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;8&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// error!&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;9&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;guessType&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;string&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;string&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;property&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;10&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;11&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;12&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;13&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For this reason, you cannot add these parameter types in 5.4.&lt;/p&gt;

&lt;h2 id=&quot;symfony-bundle-maintainers-compatibility-plan&quot;&gt;Symfony Bundle Maintainers Compatibility Plan&lt;/h2&gt;

&lt;p&gt;Unfortunately, open source maintainers can experience some more trouble
when adding return types. This is because you probably care about not
breaking backwards compatibility. And, as noted before, defining a
return type means all users overriding/implementing the method must
define it as well.&lt;/p&gt;

&lt;h3 id=&quot;document-the-return-type&quot;&gt;Document the Return Type&lt;/h3&gt;

&lt;p&gt;First, you can add return types only on safe methods. These are methods
that should not be extended by users of your package. The patch tool
from Symfony defines safe methods as any method that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Is in the &lt;code class=&quot;highlighter-shiki&quot;&gt;Tests&lt;/code&gt; namespace&lt;/li&gt;
  &lt;li&gt;Is &lt;code class=&quot;highlighter-shiki&quot;&gt;final&lt;/code&gt; or &lt;code class=&quot;highlighter-shiki&quot;&gt;@final&lt;/code&gt; (or its class)&lt;/li&gt;
  &lt;li&gt;Is &lt;code class=&quot;highlighter-shiki&quot;&gt;@internal&lt;/code&gt; (or its class)&lt;/li&gt;
  &lt;li&gt;Is &lt;code class=&quot;highlighter-shiki&quot;&gt;private&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Use &lt;code class=&quot;highlighter-shiki&quot;&gt;force=1&lt;/code&gt; to only patch types for these safe methods:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-shiki&quot;&gt;&lt;pre class=&quot;shiki-gutter&quot;&gt;1
2
3
&lt;/pre&gt;&lt;pre class=&quot;shiki-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot; data-linenr=&quot;1&quot;&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;# you can set the minimum PHP version, e.g. &amp;quot;static&amp;quot; won&amp;#39;t be added&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;2&quot;&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;# as a return type for 7.4&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;3&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;$ SYMFONY_PATCH_TYPE_DECLARATIONS=&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt;force=1&amp;amp;php=7.4&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; ./vendor/bin/patch-type-declarations&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, you have to check if there are any methods that would produce an
error in Symfony 6. The quickest way to do this is running the same
script again. Any deprecation in the output is an incompatible method.&lt;/p&gt;

&lt;p&gt;If you don’t see any deprecation: Congratulations! You are compatible with
Symfony 6 and can allow &lt;code class=&quot;highlighter-shiki&quot;&gt;^6.0&lt;/code&gt; to your Symfony dependencies without having
to break compatibility for your users.&lt;/p&gt;

&lt;h3 id=&quot;fix-all-return-types&quot;&gt;Fix all Return Types&lt;/h3&gt;

&lt;p&gt;Some bundles may discover that they need to add return types to methods
that might be overridden or implemented. As this causes a backwards
compatibility break, you probably don’t want to do this in a minor
release.&lt;/p&gt;

&lt;p&gt;Instead, make sure you properly document the correct return type using
the &lt;code class=&quot;highlighter-shiki&quot;&gt;@return&lt;/code&gt; PHPDoc. This will create the useful deprecations for your
users to know they have to update their PHP return types. The patch
script can add this PHPDoc for methods that implement/override from
third party classes/interfaces:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-shiki&quot;&gt;&lt;pre class=&quot;shiki-gutter&quot;&gt;1
&lt;/pre&gt;&lt;pre class=&quot;shiki-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot; data-linenr=&quot;1&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;$ SYMFONY_PATCH_TYPE_DECLARATIONS=force=phpdoc ./vendor/bin/patch-type-declarations&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After this minor release with all deprecations, you can safely add all
the missing return types in the next major version.&lt;/p&gt;

&lt;p&gt;The downside of this process is that you cannot support Symfony 6 until
this major release of your own package. Make sure you keep on reading to
know how you can maybe even avoid this!&lt;/p&gt;

&lt;h2 id=&quot;we-need-you-to-make-everyones-life-better&quot;&gt;We need YOU to make everyone’s life better&lt;/h2&gt;

&lt;p&gt;As you can see in this post, adding return types can have quite an
impact on the community. Some return types might cause many packages to
release a new major version, potentially messing up any roadmaps or
other processes.&lt;/p&gt;

&lt;p&gt;This is why we welcome you to report any return type deprecation that is
causing you to break compatibility in your package. You can do so in
&lt;a href=&quot;https://github.com/symfony/symfony/issues/43021&quot;&gt;this GitHub issue&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We don’t promise anything, but based on the feedback we might postpone
some return types to Symfony 7 (to give you 2 more years to release a
new major version). We’ve already done so for some common methods found
in the Symfony bundles (e.g. &lt;code class=&quot;highlighter-shiki&quot;&gt;Command::execute(): int&lt;/code&gt; and
&lt;code class=&quot;highlighter-shiki&quot;&gt;VoterInterface::vote(): int&lt;/code&gt;).&lt;/p&gt;

&lt;h2 id=&quot;take-homes&quot;&gt;Take Home’s&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Symfony 6 will be type safe&lt;/li&gt;
  &lt;li&gt;There is a &lt;a href=&quot;https://symfony.com/doc/5.4/setup/upgrade_major.html#upgrading-to-symfony-6-add-native-return-types&quot;&gt;&lt;code class=&quot;highlighter-shiki&quot;&gt;patch-type-declarations&lt;/code&gt; script&lt;/a&gt; in Symfony 5.4+ that
automatically makes your code compatible&lt;/li&gt;
  &lt;li&gt;Open source maintainers have 2.5 months to &lt;a href=&quot;https://github.com/symfony/symfony/issues/43021&quot;&gt;help us reduce the
impact&lt;/a&gt; of this change&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Wouter de Jong</name></author><category term="article" /><category term="symfony" /><category term="pre-release" /><category term="contribute" /><summary type="html">A very exciting time is coming with the biggest change for Symfony since Symfony 2.0: Symfony 6 has native PHP types on all its methods where it is possible. This will be a great push towards type safety in the PHP open source communities! Nicolas and Alexander have been working on and off for 2 years to create the best upgrade experience possible. Now, 2.5 months before the stable release, it is YOUR time to shine! Especially if you maintain any open source project (not even directly linked to Symfony), we would love to hear from you to make sure the upgrade isn’t dramatically hard.</summary></entry><entry><title type="html">Stabilizing Symfony: Testing out the pre-release</title><link href="https://wouterj.nl/2021/06/stabilizing-symfony-test-out-pre-releases" rel="alternate" type="text/html" title="Stabilizing Symfony: Testing out the pre-release" /><published>2021-06-17T00:00:00+00:00</published><updated>2021-06-17T00:00:00+00:00</updated><id>https://wouterj.nl/2021/06/stabilizing-symfony-test-out-pre-releases</id><content type="html" xml:base="https://wouterj.nl/2021/06/stabilizing-symfony-test-out-pre-releases">&lt;p&gt;Symfony has a very rigid &lt;a href=&quot;https://symfony.com/releases&quot;&gt;release schedule&lt;/a&gt; since Symfony 3.0.
Predictable releases are often mentioned as a major advantage. Did you
know that this schedule also includes a 2 month “stabilization phase”?
This phase gives time to all libraries and bundles to catch up. Testing
pre-releases is one of the best and least time consuming contributions
you can make to Symfony. Let’s see how you can help Symfony by reservering
30 minutes during these 2 months!&lt;/p&gt;

&lt;h2 id=&quot;a-quick-introduction-to-the-backwards-compatibility-promise&quot;&gt;A quick Introduction to the Backwards Compatibility Promise&lt;/h2&gt;

&lt;p&gt;It’s important to understand the &lt;a href=&quot;https://symfony.com/bc&quot;&gt;backwards compatibility promise&lt;/a&gt;.
Projects used by many applications can’t simply change behavior of
features. Applications (and its developers) rely on stability of the
framework. In short, Symfony’s promise is that your application should
be able to upgrade from x.0 to x.4 &lt;em&gt;without any code changing efforts&lt;/em&gt;.&lt;/p&gt;

&lt;aside class=&quot;side&quot; data-type=&quot;BC Promise&quot;&gt;
  &lt;p&gt;The &lt;a href=&quot;https://symfony.com/bc&quot;&gt;promise&lt;/a&gt; does define some boundaries of the backwards
compatibility. For instance, if you use internal classes or an
experimental feature, there is a chance you need to make changes when
upgrading.&lt;/p&gt;
&lt;/aside&gt;

&lt;p&gt;Before releasing a new minor version (e.g. 5.3.0), the Symfony Core team
needs to make sure 2 conditions are true:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;All changes to existing features are backwards compatible&lt;/li&gt;
  &lt;li&gt;All new features must be stable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The last point is important: Once a feature lands in a stable release,
it’s no longer possible to change its behavior.&lt;/p&gt;

&lt;p&gt;Now you know the main challenges Symfony is facing when releasing a new
minor version, let’s see how you can help!&lt;/p&gt;

&lt;h2 id=&quot;reporting-issues-during-stabilization&quot;&gt;Reporting Issues during Stabilization&lt;/h2&gt;

&lt;p&gt;New features are often tested in little demo applications. As we all
know, small demo applications often work much better than real life
applications. This is why bugs and backwards compatibility breaks
sometimes go completely unnoticed until real life applications start
upgrading.&lt;/p&gt;

&lt;p&gt;Receiving feedback from real life applications is crucial: Symfony’s
only goal is to help you make real stuff in your daily jobs. It’s great
to receive bug reports, at all times. Yet, it’s significantly more
difficult to fix backwards compatibility breaks or bugs after a stable
release.&lt;/p&gt;

&lt;p&gt;Imagine there is a backwards compatibility break (BC break) that
resulted in a PHP error. Applications that already upgraded fixed their
code to remove this error. This means that removing the BC break is also
a BC break in itself!&lt;/p&gt;

&lt;p&gt;This is why testing pre-releases are critical. Pre-releases are not
covered by the BC promise. If you find a problem, we can fix the break
without yet another deprecation layer.&lt;/p&gt;

&lt;h2 id=&quot;how-to-test-pre-releases&quot;&gt;How to Test Pre-Releases&lt;/h2&gt;

&lt;p&gt;I hope by now, you understand the value of pre-release testing. But now,
how do you do this? Is it really just 30 minutes?&lt;/p&gt;

&lt;h3 id=&quot;testing-pre-releases-in-applications&quot;&gt;Testing Pre-Releases in Applications&lt;/h3&gt;

&lt;p&gt;Most people maintain Symfony applications: private projects using the
Symfony framework as a base. These projects can test pre-releases in 3
steps:&lt;/p&gt;

&lt;aside class=&quot;side&quot; data-type=&quot;Quick note on stability flags&quot;&gt;
  &lt;p&gt;During stabilization, Symfony releases a beta or RC (Release Candidate)
release almost on a weekly basis. Seeing the first beta release is great
indicator that Symfony has started with the stabilization phase.&lt;/p&gt;

  &lt;p&gt;The RC releases are almost stable: They will probably no longer break
compatibility and the big issues are fixed.&lt;/p&gt;

  &lt;p&gt;However, as bugs are continously fixed during the stabilization phase,
the dev branch is more stable than a pre-release made a couple days ago.
It’s often a great idea to use &lt;code class=&quot;highlighter-shiki&quot;&gt;@dev&lt;/code&gt; instead of &lt;code class=&quot;highlighter-shiki&quot;&gt;@beta&lt;/code&gt; or &lt;code class=&quot;highlighter-shiki&quot;&gt;@rc&lt;/code&gt;.&lt;/p&gt;
&lt;/aside&gt;

&lt;ol&gt;
  &lt;li&gt;Update your &lt;code class=&quot;highlighter-shiki&quot;&gt;composer.json&lt;/code&gt; to allow the next dev release. E.g.
change &lt;code class=&quot;highlighter-shiki&quot;&gt;5.3.*&lt;/code&gt; to &lt;code class=&quot;highlighter-shiki&quot;&gt;5.4.*@dev&lt;/code&gt; for all &lt;code class=&quot;highlighter-shiki&quot;&gt;symfony/*&lt;/code&gt; packages to test
Symfony 5.4. 
Make sure to also update the &lt;code class=&quot;highlighter-shiki&quot;&gt;extra.symfony.require&lt;/code&gt; key if it’s
present&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-shiki&quot;&gt;&amp;quot;minimum-stability&amp;quot;: &amp;quot;dev&amp;quot;&lt;/code&gt; and &lt;code class=&quot;highlighter-shiki&quot;&gt;&amp;quot;prefer-stable&amp;quot;: true&lt;/code&gt; to your
&lt;code class=&quot;highlighter-shiki&quot;&gt;composer.json&lt;/code&gt; file. This tells Composer to install dev versions,
but use stable versions for all your non-Symfony packages&lt;/li&gt;
  &lt;li&gt;Update your dependencies and run your test suite&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Hopefully, your tests will pass. If they don’t, it means there is a BC
break or bug in the upcoming release.
In that case, you can &lt;a href=&quot;https://symfony.com/doc/current/contributing/code/bugs.html&quot;&gt;report a bug&lt;/a&gt; to Symfony. It’s great
to also provide a reproducer: some code that allows everyone to
experience the bug you found. It’s hard to fix a bug if you don’t
experience it ;)&lt;/p&gt;

&lt;p&gt;There is also a great benefit for you: You already tested your
application with the upcoming version. You may find yourself fixing some
deprecations on a boring Friday afternoon. Before you know it, your
applications is ready for the next release!&lt;/p&gt;

&lt;h3 id=&quot;testing-pre-releases-in-packages&quot;&gt;Testing Pre-Releases in Packages&lt;/h3&gt;

&lt;p&gt;Open source packages often test against multiple versions of their
dependencies (e.g. they test support for Symfony 4 and 5).&lt;/p&gt;

&lt;p&gt;You can also add a “dev” version to test your package with the next
version of your dependencies. When running the dev tests, you can use
&lt;code class=&quot;highlighter-shiki&quot;&gt;composer config&lt;/code&gt; to allow dev dependencies:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-shiki&quot;&gt;&lt;pre class=&quot;shiki-gutter&quot;&gt;1
&lt;/pre&gt;&lt;pre class=&quot;shiki-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot; data-linenr=&quot;1&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;composer config minimum-stability dev&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This means your package now also tests against the dev dependencies.
This is a great way to see if you support upcoming versions, as well as
discovering bugs in your dependencies early. Depending on the stability
of your dependencies, it can be a good idea to allow the dev tests to
fail (e.g. using &lt;code class=&quot;highlighter-shiki&quot;&gt;allow_failures&lt;/code&gt; in Travis CI).&lt;/p&gt;

&lt;p&gt;I’ve used this technique in my own packages, which you can use as an
example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/wouterj/WouterJEloquentBundle/blob/2.x/.github/workflows/tests.yml#L68-L74&quot;&gt;GitHub Actions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/wouterj/WouterJEloquentBundle/blob/4284b3c56c1f04bc9faf31783e702d292afc455f/.travis.yml#L37-L40&quot;&gt;Travis CI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;take-homes&quot;&gt;Take Homes&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Contributing to Symfony doesn’t only include writing code&lt;/li&gt;
  &lt;li&gt;Bugs are much more easily fixed in a pre-release&lt;/li&gt;
  &lt;li&gt;Please test pre-releases (of any software) and report issues you find&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Wouter de Jong</name></author><category term="article" /><category term="symfony" /><category term="contribute" /><category term="pre-release" /><summary type="html">Symfony has a very rigid release schedule since Symfony 3.0. Predictable releases are often mentioned as a major advantage. Did you know that this schedule also includes a 2 month “stabilization phase”? This phase gives time to all libraries and bundles to catch up. Testing pre-releases is one of the best and least time consuming contributions you can make to Symfony. Let’s see how you can help Symfony by reservering 30 minutes during these 2 months!</summary></entry><entry><title type="html">Meet the new Symfony Security: Authenticators</title><link href="https://wouterj.nl/2020/04/authenticators-new-symfony-security" rel="alternate" type="text/html" title="Meet the new Symfony Security: Authenticators" /><published>2020-04-28T00:00:00+00:00</published><updated>2020-04-28T00:00:00+00:00</updated><id>https://wouterj.nl/2020/04/authenticators-new-symfony-security</id><content type="html" xml:base="https://wouterj.nl/2020/04/authenticators-new-symfony-security">&lt;p&gt;After more than half a year of work and discussions, Symfony 5.1 ships
with an experimental and revisited Security system. I’m incredibly
excited about this system, as I think it opens up the component for a
lot of possibilities. That’s why in the coming week, I’ll publish a
series of blogposts about this new system. I hope you’ll be just as
excited as I am and help realising the full potential with us!&lt;/p&gt;

&lt;aside class=&quot;side&quot; data-type=&quot;Try it yourself!&quot;&gt;
  &lt;p&gt;If you’re using Symfony 5.1, the SecurityBundle comes with all tools you
need! Set &lt;code class=&quot;highlighter-shiki&quot;&gt;security.enable_authenticator_manager&lt;/code&gt; to &lt;code class=&quot;highlighter-shiki&quot;&gt;true&lt;/code&gt; to enable the
new system!&lt;/p&gt;

  &lt;p&gt;Please be aware that this new system in experimental. It may contain
backwards compatibility breaks in 5.2. However, I don’t like to ruin the
life of early-testers so we keep this to the bare minimum. Please give it
a go and report any suggestions, problems, bugs, leaks or whatever!&lt;/p&gt;
&lt;/aside&gt;

&lt;p&gt;So… what is so different about this new system? It would like to
summarize it in three topics:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#removed-everything-but-guards&quot;&gt;It removes everything but Guard&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#moved-to-an-event-based-system&quot;&gt;It refactored to an event-based System&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-next-generation-of-guards&quot;&gt;It introduces the next generation of Guards&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;removed-everything-but-guards&quot;&gt;Removed everything but Guards&lt;/h2&gt;

&lt;p&gt;Since Symfony 2.0, the authentication system of Symfony can be drawn
like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/security2-providers-listeners.png&quot; alt=&quot;Symfony Security&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This diagram has set-up 2 firewalls (yellow and red). The yellow
firewall has 2 different ways to authenticate (e.g. login form and json
login) and the red firewall has one way to authenticate (e.g. JWT).&lt;/p&gt;

&lt;p&gt;A &lt;em&gt;firewall listener&lt;/em&gt; extracts all necessary information from the
request (e.g. username, password, csrf token). This is passed into a
global &lt;em&gt;authentication manager&lt;/em&gt;, which then calls the required
&lt;em&gt;authentication provider&lt;/em&gt; (e.g. one that can authenticate a username and
password).&lt;/p&gt;

&lt;p&gt;If you were to write your own custom authentication, you would most
likely need to provide a custom &lt;em&gt;listener&lt;/em&gt;. This listener needs to do
all stuff: calling the manager, storing the authenticated token, setting
up the session (e.g. migrating it) and creating a correct response. It’s
very easy to forget a step, resulting in a less secure or broken
authentication. Hence, if you look at Symfony’s own firewall listeners,
you can find minor inconsistencies as well.&lt;/p&gt;

&lt;p&gt;The new authenticator system can be drawn like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/security2-authenticators.png&quot; alt=&quot;Symfony Authenticators&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;There is &lt;em&gt;only one&lt;/em&gt; listener, provided by Symfony, that passes the
request into an authenticator manager&lt;/li&gt;
  &lt;li&gt;There is &lt;em&gt;one&lt;/em&gt; authenticator manager per firewall. This manager calls
the correct authenticator, which authenticates the request and
returns a response&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You now only need to write a custom authenticator. The authenticator
manager (maintained by Symfony) takes care of session management,
storing the token, remember me functionality, etc. So there are less
things to forget!&lt;/p&gt;

&lt;p&gt;This may appear to be similar to Guards in the current system… It is!
However, the internal logics of the component was still using the
listeners and providers. This new system makes them all use exactly the
same interface: Authenticators. This makes it easier to understand and
contribute to the Security component.&lt;/p&gt;

&lt;p&gt;As there now is one authenticator manager per firewall, the manager
knows how to authenticate a request and return a success response. &lt;strong&gt;This
also allowed us to add programmatic login to Symfony&lt;/strong&gt;: The manager is
now finally able to authenticate a User object and return a success
response.&lt;/p&gt;

&lt;h2 id=&quot;moved-to-an-event-based-system&quot;&gt;Moved to an Event-based System&lt;/h2&gt;

&lt;p&gt;Symfony’s HttpKernel component is built around
&lt;a href=&quot;https://symfony.com/doc/current/components/http_kernel.html#httpkernel-driven-by-events&quot;&gt;5 kernel events&lt;/a&gt;.
Listeners to these events execute the core process of Symfony: finding a
controller, executing that controller and handling the response. You can
also create your own event listeners on these events, so you can
completely customize and extend this core process.&lt;/p&gt;

&lt;aside class=&quot;side&quot; data-type=&quot;Here's how you can help&quot;&gt;
  &lt;p&gt;I can imagine Symfony providing a &lt;em&gt;login throttling listener&lt;/em&gt;, which
blocks login for a couple of minutes after too many failed attempts.&lt;/p&gt;

  &lt;p&gt;Or e.g. a monolog logger to log failed attempts (such that you can
analyse them and block misbehaving IPs or the like).&lt;/p&gt;

  &lt;p&gt;You can probably come up with even better ideas of listeners! Please
contribute them to Symfony.&lt;/p&gt;
&lt;/aside&gt;

&lt;p&gt;Up to now, the Security component didn’t use events for this purpose.
This made many parts of the component quite hard to extend or customize.
That’s why this new system is built around 3 main events:&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;&lt;code class=&quot;highlighter-shiki&quot;&gt;VerifyAuthenticatorCredentialsEvent&lt;/code&gt;&lt;/dt&gt;
  &lt;dd&gt;This is the most important event. Its listeners validate any
credentials returned from the authenticator (e.g. a password or CSRF
token).&lt;/dd&gt;
  &lt;dt&gt;&lt;code class=&quot;highlighter-shiki&quot;&gt;LoginSuccessEvent&lt;/code&gt;&lt;/dt&gt;
  &lt;dd&gt;If all credentials were valid, this event is dispatched. The core
system uses this to e.g. create a remember me cookie or upgrade the
password hash.&lt;/dd&gt;
  &lt;dt&gt;&lt;code class=&quot;highlighter-shiki&quot;&gt;LoginFailureEvent&lt;/code&gt;&lt;/dt&gt;
  &lt;dd&gt;If there was an error or credentials are not correct, this event is
dispatched.&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;All core logic is now executed as listener on these events. E.g. if an
authenticator requires a password to be validated, a listener on
&lt;code class=&quot;highlighter-shiki&quot;&gt;VerifyAuthenticatorCredentialsEvent&lt;/code&gt; will do this for you. Things like
user checkers, session strategies, remember me cookies, password
upgrading are all done inside event listeners.&lt;/p&gt;

&lt;h2 id=&quot;the-next-generation-of-guards&quot;&gt;The Next Generation of Guards&lt;/h2&gt;

&lt;aside class=&quot;side&quot; data-type=&quot;Here's how you can help&quot;&gt;
  &lt;p&gt;It would be lovely to have many more modern authenticators inside
Symfony core:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;Third-party/redirections: SAML, OAuth, …&lt;/li&gt;
    &lt;li&gt;API tokens: JWT, JOSE, PASETO, Windows Identity Foundation, …&lt;/li&gt;
    &lt;li&gt;“Magic links” sent via Notifier component&lt;/li&gt;
  &lt;/ul&gt;
&lt;/aside&gt;

&lt;p&gt;A few years ago,
&lt;a href=&quot;https://symfonycasts.com/blog/guard-authentication&quot;&gt;Guards&lt;/a&gt; where
introduced to provide a better extension point for Security. The new
system started with this exact Guard interface as a base. The event
based logic introduced a centralized credentials checking. This removed
the need for a &lt;code class=&quot;highlighter-shiki&quot;&gt;checkCredentials()&lt;/code&gt; method in the Guard interface. Later
on, we introduced some more changes to the interface: The next generation
&lt;code class=&quot;highlighter-shiki&quot;&gt;AuthenticatorInterface&lt;/code&gt; was born!&lt;/p&gt;

&lt;p&gt;The big change from the Guard interface you may know is that
&lt;code class=&quot;highlighter-shiki&quot;&gt;getCredentials()&lt;/code&gt; and &lt;code class=&quot;highlighter-shiki&quot;&gt;getUser()&lt;/code&gt; are merged into one method:
&lt;code class=&quot;highlighter-shiki&quot;&gt;authenticate(Request $request)&lt;/code&gt;. And, as mentioned before,
&lt;code class=&quot;highlighter-shiki&quot;&gt;checkCredentials()&lt;/code&gt; is gone.&lt;/p&gt;

&lt;p&gt;This new &lt;code class=&quot;highlighter-shiki&quot;&gt;authenticate()&lt;/code&gt; method creates a &lt;em&gt;Security Passport&lt;/em&gt;. This is
a new concept in authenticators. &lt;strong&gt;A passport contains the user and any
credentials needed to authenticate.&lt;/strong&gt; This extra information is provided
using &lt;em&gt;Passport Badges&lt;/em&gt;. Listeners on the
&lt;code class=&quot;highlighter-shiki&quot;&gt;VerifyAuthenticatorCredentialsEvent&lt;/code&gt; will validate and check the
passport and all its badges. If &lt;em&gt;all&lt;/em&gt; badges are resolved, the user is
succesfully authenticated.&lt;/p&gt;

&lt;p&gt;Let’s see the passport in action. Assume we’re building a form login:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-shiki&quot;&gt;&lt;pre class=&quot;shiki-gutter&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
&lt;/pre&gt;&lt;pre class=&quot;shiki-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot; data-linenr=&quot;1&quot;&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;2&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;use&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; Symfony&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Component&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;HttpFoundation&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;Request&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;3&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;use&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; Symfony&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Component&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Security&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Core&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Exception&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;UsernameNotFoundException&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;4&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;use&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; Symfony&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Component&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Security&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Http&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Authenticator&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;AuthenticatorInterface&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;5&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;use&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; Symfony&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Component&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Security&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Http&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Authenticator&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Passport&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Badge&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;CsrfTokenBadge&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;6&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;use&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; Symfony&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Component&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Security&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Http&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Authenticator&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Passport&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Credentials&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;PasswordCredentials&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;7&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;use&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; Symfony&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Component&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Security&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Http&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Authenticator&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Passport&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;Passport&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;8&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;use&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; Symfony&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Component&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Security&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Http&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Authenticator&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Passport&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;PassportInterface&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;9&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;10&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;FormAuthenticator&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;implements&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;AuthenticatorInterface&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;11&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;12&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;13&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;14&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;authenticate&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;Request&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;request&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;PassportInterface&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;15&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;16&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// find a user based on an &amp;quot;email&amp;quot; form field&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;17&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;user&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;userRepository&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;findOneByEmail&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;request&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;get&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt;email&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;))&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;18&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;!$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;user&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;19&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;throw&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;UsernameNotFoundException&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;20&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;21&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;22&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// return the Security passport&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;23&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;Passport&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;24&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// add the user we&amp;#39;ve just found&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;25&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;user&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;26&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// add credentials from the &amp;quot;password&amp;quot; form field&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;27&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;PasswordCredentials&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;request&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;get&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt;password&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;)),&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;28&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;[&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;29&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;                &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// and CSRF protection using a &amp;quot;csrf_token&amp;quot; field&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;30&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;                &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;CsrfTokenBadge&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt;loginform&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;request&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;get&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt;csrf_token&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;))&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;31&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;32&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;                &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// and add support for upgrading the password hash&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;33&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;                &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;PasswordUpgradeBadge&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;34&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;                    &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;request&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;get&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt;password&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;),&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;35&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;                    &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;userRepository&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;36&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;                &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;37&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;38&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;39&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;40&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;aside class=&quot;side&quot; data-type=&quot;Here's how you can help&quot;&gt;
  &lt;p&gt;I’ve talked before on &lt;a href=&quot;/2019/03/security-removing-user&quot;&gt;removing the User object from Security&lt;/a&gt;.
The main passport interface does not require a user. I invite anyone to
build a system that works without user and submit it to Symfony.&lt;/p&gt;
&lt;/aside&gt;

&lt;p&gt;This gives an authenticator all power about what is needed for
successful authentication. At the same time, the most important piece is
handled centralized in an event listener. This makes applications less
vunerable, as security leaks will be fixed by the Symfony Security
team. You can also write your own listener to resolve a badge before a
listener of Symfony, to customize the checks.&lt;/p&gt;

&lt;p&gt;There also is a &lt;code class=&quot;highlighter-shiki&quot;&gt;CustomCredentials&lt;/code&gt; class that you can use to call a
custom method to check credentials and a &lt;code class=&quot;highlighter-shiki&quot;&gt;SelfCheckingPassport&lt;/code&gt; in case
you don’t need Symfony to check any credentials (e.g. when using API tokens).&lt;/p&gt;

&lt;h2 id=&quot;next-up&quot;&gt;Next up&lt;/h2&gt;

&lt;p&gt;I plan to write at least two more blogposts about the new system in the
coming weeks. We’ll write real code for a real custom logins on both of these:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Writing a custom authenticator: Passwords &amp;amp; Badges&lt;/li&gt;
  &lt;li&gt;Customizing security using event listeners&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Wouter de Jong</name></author><category term="article" /><category term="symfony" /><category term="security" /><summary type="html">After more than half a year of work and discussions, Symfony 5.1 ships with an experimental and revisited Security system. I’m incredibly excited about this system, as I think it opens up the component for a lot of possibilities. That’s why in the coming week, I’ll publish a series of blogposts about this new system. I hope you’ll be just as excited as I am and help realising the full potential with us!</summary></entry><entry><title type="html">Learn to Write more Concise</title><link href="https://wouterj.nl/2020/02/learn-to-write-more-concise" rel="alternate" type="text/html" title="Learn to Write more Concise" /><published>2020-02-10T00:00:00+00:00</published><updated>2020-02-10T00:00:00+00:00</updated><id>https://wouterj.nl/2020/02/learn-to-write-more-concise</id><content type="html" xml:base="https://wouterj.nl/2020/02/learn-to-write-more-concise">&lt;p&gt;Ernest Hemingway is a writer from the twentieth-century know for his
short and declarative writing style. Hemingwayapp.com is a free online
tool that analyses your text according to this style. It also runs the
Automated Readability Index algorithm. This makes it a perfect tool to
write concise, short and easy to understand texts.&lt;/p&gt;

&lt;article class=&quot;external&quot;&gt;
  &lt;p&gt;&lt;img src=&quot;/img/hemingway-app-screenshot.png&quot; class=&quot;external__hero&quot; /&gt;&lt;/p&gt;

  &lt;h3 class=&quot;external__target&quot;&gt;&lt;a href=&quot;http://www.hemingwayapp.com/&quot;&gt;http://www.hemingwayapp.com&lt;/a&gt;&lt;/h3&gt;

  &lt;p class=&quot;external__description&quot;&gt;Hemingway makes your writing bold and clear. It’s like a
  spellchecker, but for style. It makes sure that your reader will focus
  on your message, not your prose.

  Too often, our words are like our thoughts — innumerable and
  disorganized. Almost any bit of writing could use some cutting. Less
  is more, etc.&lt;/p&gt;
&lt;/article&gt;

&lt;p&gt;I almost always copy-paste my writings into the tool to check and
revisit some redundant parts and too long sentences. An average adult
reads around the 10th grade. All development language often doesn’t have
a good influence on your grade, but at least you are aware of the
difficulty of your text.&lt;/p&gt;</content><author><name>Wouter de Jong</name></author><category term="link" /><category term="symfony" /><category term="security" /><summary type="html">Ernest Hemingway is a writer from the twentieth-century know for his short and declarative writing style. Hemingwayapp.com is a free online tool that analyses your text according to this style. It also runs the Automated Readability Index algorithm. This makes it a perfect tool to write concise, short and easy to understand texts.</summary></entry><entry><title type="html">Grant on Permissions, not Roles</title><link href="https://wouterj.nl/2020/01/grant-on-permissions-not-roles" rel="alternate" type="text/html" title="Grant on Permissions, not Roles" /><published>2020-01-14T00:00:00+00:00</published><updated>2020-01-14T00:00:00+00:00</updated><id>https://wouterj.nl/2020/01/grant-on-permissions-not-roles</id><content type="html" xml:base="https://wouterj.nl/2020/01/grant-on-permissions-not-roles">&lt;p&gt;Symfony uses a very flexible voter approach to grant access for a user.
As this is often based on domain-specific requirements and decisions,
the voters that come with Symfony are very basic. I would even argue
that it’s better if you not use them, and only rely on custom security
voters.&lt;/p&gt;

&lt;h2 id=&quot;terminology&quot;&gt;Terminology&lt;/h2&gt;

&lt;p&gt;In Symfony security, the string &lt;code class=&quot;highlighter-shiki&quot;&gt;ROLE_USER&lt;/code&gt; can actually mean a lot of
things, let’s first establish a common meaning:&lt;/p&gt;

&lt;p&gt;What you pass into &lt;code class=&quot;highlighter-shiki&quot;&gt;isGranted()&lt;/code&gt; calls is a &lt;em&gt;security attribute&lt;/em&gt;. It
&lt;em&gt;can&lt;/em&gt; start with &lt;code class=&quot;highlighter-shiki&quot;&gt;ROLE_&lt;/code&gt;, but any other text is possible as well.&lt;/p&gt;

&lt;p&gt;A user has &lt;em&gt;security roles&lt;/em&gt;. These are returned by &lt;code class=&quot;highlighter-shiki&quot;&gt;UserInterface#getRoles()&lt;/code&gt;
and always start with &lt;code class=&quot;highlighter-shiki&quot;&gt;ROLE_&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-shiki&quot;&gt;roles&lt;/code&gt; setting in your access control is passed into
&lt;code class=&quot;highlighter-shiki&quot;&gt;AccessDecisionManager#decide()&lt;/code&gt; (which is also what &lt;code class=&quot;highlighter-shiki&quot;&gt;isGranted()&lt;/code&gt;
uses). While the setting is named “roles”, this is actually a
&lt;em&gt;security attribute&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;meet-the-role-voters&quot;&gt;Meet the Role Voters&lt;/h2&gt;

&lt;aside class=&quot;side&quot; data-type=&quot;Vote strategy&quot;&gt;
  &lt;p&gt;By default, Symfony’s election is “affirmative”. This means that if one voter
votes for GRANT, the user is granted. This strategy can be changed using
&lt;a href=&quot;&quot;&gt;&lt;code class=&quot;highlighter-shiki&quot;&gt;security.access_control_manager.strategy&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/aside&gt;

&lt;p&gt;If you call &lt;code class=&quot;highlighter-shiki&quot;&gt;isGranted()&lt;/code&gt; in some way, a small election organized by Symfony
Security takes place. Each voter votes GRANT, DENY or ABSTAIN. Voters
vote for a specific &lt;em&gt;security attribute&lt;/em&gt;, with some optional context
(the 2nd argument of &lt;code class=&quot;highlighter-shiki&quot;&gt;isGranted()&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Voters are powerful, but, as said in the intro, often depent on lots of
business logic. This is why Symfony cannot provide many voters. To make
the security system work, it comes with two very primitive voters:
&lt;code class=&quot;highlighter-shiki&quot;&gt;RoleVoter&lt;/code&gt; and &lt;code class=&quot;highlighter-shiki&quot;&gt;RoleHierarchyVoter&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;These voters activate as soon as the &lt;em&gt;security attribute&lt;/em&gt; starts with
&lt;code class=&quot;highlighter-shiki&quot;&gt;ROLE_&lt;/code&gt; (e.g. &lt;code class=&quot;highlighter-shiki&quot;&gt;isGranted(&amp;#39;ROLE_USER&amp;#39;)&lt;/code&gt; or &lt;code class=&quot;highlighter-shiki&quot;&gt;isGranted(&amp;#39;ROLE_ADMIN&amp;#39;)&lt;/code&gt;).
They check if the current user has this role (or if the
&lt;a href=&quot;https://symfony.com/doc/current/security.html#security-role-hierarchy&quot;&gt;role hierarchy&lt;/a&gt; contains this role).&lt;/p&gt;

&lt;h2 id=&quot;whats-wrong-with-voting-based-on-roles&quot;&gt;What’s wrong With Voting based on Roles?&lt;/h2&gt;

&lt;p&gt;Voting on a role is very easy: It’s supported by default and gets the job done.
Yet, it doesn’t add any flexibility. Also, complex cases result in a
lots of code in a controller and often code duplication.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Roles belong to authentication (identification), rather than
authorization.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/security-roles-as-identification.png&quot; alt=&quot;roles groups users&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Roles defines the role (or function/task) of this user on the website.
Someone might be the “moderator” on this forum, just a regular visitor or
some premium plan member. That’s their role. &lt;em&gt;Roles allows your
application to group different users together. This makes granting
permissions easier.&lt;/em&gt; For instance, it’s difficult to describe that users
John, Mary and William are allowed to edit all posts. It’s easier to
group them as being “the moderators” of this website. You can then grant
the permissions “edit all posts” to the “moderators” role.&lt;/p&gt;

&lt;p&gt;So rather than using roles as permissions, you relate permissions to
specific roles. These permissions are then voted on by a custom voter.
This allows you to change permissions throughout your code base easier
and keep your controllers thin.&lt;/p&gt;

&lt;h2 id=&quot;grant-access-for-permissions&quot;&gt;Grant Access for Permissions&lt;/h2&gt;

&lt;p&gt;For this example, let’s create a voter for a blog post. We want to end
up with a call like &lt;code class=&quot;highlighter-shiki&quot;&gt;isGranted(&amp;quot;POST_EDIT&amp;quot;, $blogPost)&lt;/code&gt;. The voter
should then decide if the current user is allowed to edit the blog post.
They should be allowed if any of these is true:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If it’s a &lt;em&gt;user&lt;/em&gt;, it should be the author of the post&lt;/li&gt;
  &lt;li&gt;If it’s a &lt;em&gt;moderator&lt;/em&gt;, it should always be allowed&lt;/li&gt;
  &lt;li&gt;If it’s a &lt;em&gt;senior user&lt;/em&gt;, it should be senior for that specific topic&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Do you see how we now relate the &lt;em&gt;role of the user&lt;/em&gt; to the &lt;em&gt;specific
permission of editing a blog post&lt;/em&gt;?&lt;/p&gt;

&lt;h2 id=&quot;creating-the-voter&quot;&gt;Creating the Voter&lt;/h2&gt;

&lt;aside class=&quot;side&quot; data-type=&quot;Without MakerBundle&quot;&gt;
  &lt;p&gt;If you don’t have the maker bundle, either install it or create a PHP
class that extends the &lt;code class=&quot;highlighter-shiki&quot;&gt;Voter&lt;/code&gt; class.&lt;/p&gt;
&lt;/aside&gt;

&lt;p&gt;So the solution is to create your own voter. It’s a PHP class
implementing Symfony’s &lt;code class=&quot;highlighter-shiki&quot;&gt;VoterInterface&lt;/code&gt;. For easy usage, there is an
abstract class named &lt;code class=&quot;highlighter-shiki&quot;&gt;Voter&lt;/code&gt;. If you have the &lt;a href=&quot;&quot;&gt;MakerBundle&lt;/a&gt; installed,
you’re lucky:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-shiki&quot;&gt;&lt;pre class=&quot;shiki-gutter&quot;&gt;1
&lt;/pre&gt;&lt;pre class=&quot;shiki-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot; data-linenr=&quot;1&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;$ bin/console make:voter&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;specify-if-the-voter-supports-this-call&quot;&gt;Specify if the Voter Supports this Call&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-shiki&quot;&gt;Voter#supports()&lt;/code&gt; returns a boolean, depending on whether it wants
to join the election for this &lt;em&gt;security attribute&lt;/em&gt; and &lt;em&gt;context&lt;/em&gt;. In
this example, the security attribute should be &lt;code class=&quot;highlighter-shiki&quot;&gt;POST_EDIT&lt;/code&gt; and the
entity should be instance of &lt;code class=&quot;highlighter-shiki&quot;&gt;BlogPost&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-shiki&quot;&gt;&lt;pre class=&quot;shiki-gutter&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;pre class=&quot;shiki-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot; data-linenr=&quot;1&quot;&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;2&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;BlogPostVoter&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;extends&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;Voter&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;3&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;4&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;protected&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;supports&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;attribute&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;subject&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;5&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;6&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt;POST_EDIT&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;===&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;attribute&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;7&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;subject&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;instanceof&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;App&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Entity&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;BlogPost&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;8&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;9&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;10&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;11&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;write-the-decision-logic&quot;&gt;Write the Decision Logic&lt;/h3&gt;

&lt;p&gt;If the voter indicated that it supported this call,
&lt;code class=&quot;highlighter-shiki&quot;&gt;Voter#voteOnAttribute()&lt;/code&gt; is called. This method implements the
permission logic:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-shiki&quot;&gt;&lt;pre class=&quot;shiki-gutter&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
&lt;/pre&gt;&lt;pre class=&quot;shiki-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot; data-linenr=&quot;1&quot;&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;2&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;BlogPostVoter&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;extends&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;Voter&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;3&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;4&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;decisionManager&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;5&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;6&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;__construct&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;AccessDecisionManager&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;decisionManager&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;7&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;8&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;decisionManager&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;decisionManager&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;9&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;10&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;11&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;12&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;13&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;14&quot;&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;     * @param &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2; font-style: italic&quot;&gt;BlogPost&lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt; $blogPost&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;15&quot;&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;16&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;protected&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;voteOnAttribute&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;attribute&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;blogPost&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;TokenInterface&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;token&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;17&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;18&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;user&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;token&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;getUser&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;19&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// if the user is anonymous, do not grant access&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;20&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;!$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;user&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;instanceof&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;UserInterface&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;21&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;false;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;22&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;23&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;24&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// if the user is a moderator, always allow&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;25&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;decisionManager&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;decide&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;token&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt;ROLE_MODERATOR&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;]))&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;26&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;true;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;27&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;28&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;29&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// Allow if the user is senior on this topic&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;30&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;user&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;isSeniorIn&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;blogPost&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;getTopic&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;())&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;31&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;true;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;32&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;33&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;34&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// Allow if the user wrote this post&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;35&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;blogPost&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;getAuthor&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;===&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;user&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;36&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;true;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;37&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;38&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;39&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// Otherwise, deny access&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;40&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;false;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;41&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;42&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As you see, in the voter we do call &lt;code class=&quot;highlighter-shiki&quot;&gt;decide()&lt;/code&gt; with a role. But that’s
fine, this class is meant to relate permissions (&lt;code class=&quot;highlighter-shiki&quot;&gt;POST_EDIT&lt;/code&gt;) to a
user’s role on the website.&lt;/p&gt;

&lt;p&gt;We can now use &lt;code class=&quot;highlighter-shiki&quot;&gt;isGranted(&amp;#39;POST_EDIT&amp;#39;, $blogPost)&lt;/code&gt; in our application to
check if the user is allowed to edit the blog post. The access decision
manager will call our custom voter to decide on this. If we ever need
more complex logic to check, we only have to update the code in the
voter.&lt;/p&gt;

&lt;p&gt;It’s often a good idea to create one voter per entity. This voter can be
extended to also vote on &lt;code class=&quot;highlighter-shiki&quot;&gt;POST_CREATE&lt;/code&gt;, &lt;code class=&quot;highlighter-shiki&quot;&gt;POST_DELETE&lt;/code&gt;, etc. To check if
a Create button should be shown, I recommend passing the FQCN as context
as there is no object yet (e.g.
&lt;code class=&quot;highlighter-shiki&quot;&gt;is_granted(&amp;#39;POST_CREATE&amp;#39;, &amp;#39;App\Entity\BlogPost&amp;#39;)&lt;/code&gt;).&lt;/p&gt;

&lt;h2 id=&quot;make-your-voters-dynamic-access-logic-in-the-database&quot;&gt;Make your Voters Dynamic (Access Logic in the Database)&lt;/h2&gt;

&lt;p&gt;Instead of hardcoding all your permissions in the voters, you can also
read information from the database inside your voter. This allows you to
persist permissions in the database, which can then be managed by users
in an admin panel or the like.&lt;/p&gt;

&lt;aside class=&quot;side&quot; data-type=&quot;Caution&quot;&gt;
  &lt;p&gt;This example is just to illustrate the flexibility of the Voter
principle. It isn’t necessarily battle-tested or recommended for
production usage.&lt;/p&gt;
&lt;/aside&gt;

&lt;p&gt;In the most generic way, you can create a &lt;code class=&quot;highlighter-shiki&quot;&gt;Permission&lt;/code&gt; entity that
specifies which roles are required for a specific security attribute. It
may also use Symfony’s &lt;a href=&quot;https://symfony.com/doc/current/security/expressions.html&quot;&gt;ExpressionLanguage component&lt;/a&gt;) to
check additional conditions:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-shiki&quot;&gt;&lt;pre class=&quot;shiki-gutter&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
&lt;/pre&gt;&lt;pre class=&quot;shiki-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot; data-linenr=&quot;1&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;PermissionVoter&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;implements&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;VoterInterface&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;2&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;3&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;4&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;5&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// this vote() method is the only required method of VoterInterface&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;6&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// it should return ACCESS_ABSTAIN (i.e. not supported),&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;7&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// ACCESS_GRANTED or ACCESS_DENIED.&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;8&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;protected&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;vote&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;TokenInterface&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;token&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;subject&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;array&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;attributes&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;9&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;10&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;attribute&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;attributes&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #B48EAD&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;11&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;12&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// find all stored permissions for this attribute and subject&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;13&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;permissions&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;permissionRepository&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;findBy&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;([&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;14&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt;attribute&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;attribute&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;15&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt;subject&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;subject&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;16&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;])&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;17&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;18&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// do not deny/grant if there is no permission for this&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;19&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// attribute and subject&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;20&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #B48EAD&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;===&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;count&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;permissions&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;))&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;21&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;self::&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;ACCESS_ABSTAIN&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;22&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;23&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;24&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;foreach&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;permissions&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;as&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;permission&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;25&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// continue if the role of the user does not match the role&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;26&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// of this permission&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;27&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;!$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;decisionManager&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;decide&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;token&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;permission&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;getRole&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;()]))&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;28&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;                &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;continue;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;29&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;30&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;31&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// if the permission has an extra expression, verify this is&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;32&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// true, otherwise grant access directly&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;33&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;expr&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;permission&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;getExpression&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;34&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;expr&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;35&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;                &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;decisionManager&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;decide&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;token&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;expr&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;]))&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;36&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;                    &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;self::&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;ACCESS_GRANTED&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;37&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;                &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;38&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;else&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;39&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;                &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;self::&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;ACCESS_GRANTED&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;40&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;41&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;42&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;43&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// in any other case, deny access&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;44&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;self::&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;ACCESS_DENIED&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;45&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;46&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;take-homes&quot;&gt;Take Home’s&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Roles are identification: They allow your application to group
similar types of users&lt;/li&gt;
  &lt;li&gt;Voters relate roles to specific permissions&lt;/li&gt;
  &lt;li&gt;Avoid granting access based on roles in your application, consider
writing a custom voter for them&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Wouter de Jong</name></author><category term="article" /><category term="symfony" /><category term="security" /><summary type="html">Symfony uses a very flexible voter approach to grant access for a user. As this is often based on domain-specific requirements and decisions, the voters that come with Symfony are very basic. I would even argue that it’s better if you not use them, and only rely on custom security voters.</summary></entry><entry><title type="html">Understanding Symfony Security by Using it Standalone</title><link href="https://wouterj.nl/2019/03/understanding-symfony-security-by-using-it-standalone" rel="alternate" type="text/html" title="Understanding Symfony Security by Using it Standalone" /><published>2019-03-20T00:00:00+00:00</published><updated>2019-03-20T00:00:00+00:00</updated><id>https://wouterj.nl/2019/03/understanding-symfony-security-by-using-it-standalone</id><content type="html" xml:base="https://wouterj.nl/2019/03/understanding-symfony-security-by-using-it-standalone">&lt;p&gt;Setting up big Symfony components in a blank PHP project helps a lot to
understand it. You’ll grasp the main architecture of the component much easier
this way. Let’s try to understand Symfony Security by doing exactly this!&lt;/p&gt;

&lt;h2 id=&quot;security-101&quot;&gt;Security 101&lt;/h2&gt;

&lt;p&gt;On almost all platforms, security consists of two phases: Authentication and
Authorization. Let’s quickly discuss them before digging deep into Symfony
security:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/security-phases.png&quot; alt=&quot;Authentication and Authorization&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Who are you?&lt;/strong&gt; is the main question of &lt;em&gt;Authentication&lt;/em&gt;. Every HTTP request
again, we have to find out who the requester is. At first visit to a site,
this is usually a login form. A second request often uses a session stored
after logging in to find out who you are. An API call often uses API tokens&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Are you allowed to do this?&lt;/strong&gt; is the question answered during
&lt;em&gt;Authorization&lt;/em&gt;. Every request involves an action. For instance, you are
reading this blog article, I’m editing it at the moment, over 10 years I’ll
probably delete it, etc. During authorization, we find out if the person
identified in (1) is allowed to do the action he wants to do&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;set-up-our-blank-project&quot;&gt;Set-up our Blank Project&lt;/h2&gt;

&lt;aside class=&quot;side&quot; data-type=&quot;example&quot;&gt;
  &lt;p&gt;The final project of this blogpost can be found at
&lt;a href=&quot;https://github.com/wouterj-nl/security-standalone&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;/aside&gt;

&lt;p&gt;Setting up a blank project is nothing more than creating a new directory. In
the directory, we’ll use &lt;a href=&quot;https://getcomposer.org/&quot;&gt;Composer&lt;/a&gt; to install the
Security Core component:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-shiki&quot;&gt;&lt;pre class=&quot;shiki-gutter&quot;&gt;1
2
3
&lt;/pre&gt;&lt;pre class=&quot;shiki-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot; data-linenr=&quot;1&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;$ mkdir security-101&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;2&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;$ &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;cd&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; security-101&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;3&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;$ composer require symfony/security-core&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Security contains a couple sub components: Core, Http, Guard, Csrf. In this
post, we’ll focus on the core only. In a funny plot twist, you’ll directly
discover what HTTP is doing if you’re reading the side notes!&lt;/p&gt;

&lt;h2 id=&quot;authentication-input-the-token&quot;&gt;Authentication Input: The token&lt;/h2&gt;

&lt;p&gt;The question “who are you?” can only be answered if we have input from the user
world (there must be a “you”). This input can be anything. As already
explained, the values of the login form upon login is one example of this
input. In all requests after the user logged in, a browser session represents
the input from user world.&lt;/p&gt;

&lt;aside class=&quot;side&quot; data-type=&quot;Symfony internals&quot;&gt;
  &lt;p&gt;The HTTP Security component uses listeners attached to
&lt;a href=&quot;https://symfony.com/doc/current/reference/events.html#kernel-request&quot;&gt;&lt;code class=&quot;highlighter-shiki&quot;&gt;kernel.request&lt;/code&gt;&lt;/a&gt;
to create tokens. For instance, the
&lt;a href=&quot;https://github.com/symfony/security/blob/88588499b5c3ed78becea8e0c4ec8d81e0e4f483/Http/Firewall/UsernamePasswordFormAuthenticationListener.php&quot;&gt;&lt;code class=&quot;highlighter-shiki&quot;&gt;UsernamePasswordFormAuthenticationListener&lt;/code&gt;&lt;/a&gt;
creates a &lt;code class=&quot;highlighter-shiki&quot;&gt;UsernamePasswordToken&lt;/code&gt; based on the login form submit.&lt;/p&gt;
&lt;/aside&gt;

&lt;p&gt;As our goal is just to write one working PHP file, we’ll use static strings as
“input from the user”:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-shiki&quot;&gt;&lt;pre class=&quot;shiki-gutter&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;pre class=&quot;shiki-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot; data-linenr=&quot;1&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;php &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// secure.php&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;2&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;3&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;require_once&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt;vendor/autoload.php&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;4&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;5&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;use&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; Symfony&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Component&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Security&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Core&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Authentication&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Token&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;UsernamePasswordToken&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;6&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;7&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;token&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;UsernamePasswordToken&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt;wouter&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt;pa$$word&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt;default&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This type of token is most often used in traditional applications, it holds a
username and a password (ignore that third argument for the moment). Other
tokens are for instance a &lt;code class=&quot;highlighter-shiki&quot;&gt;RememberMeToken&lt;/code&gt;, which uses a browser cookie, or
you can create an &lt;code class=&quot;highlighter-shiki&quot;&gt;BearerToken&lt;/code&gt; that contains a header used for API requests.&lt;/p&gt;

&lt;h3 id=&quot;lets-authenticate-the-token-meet-the-authenticationmanager&quot;&gt;Let’s Authenticate the Token: Meet the AuthenticationManager&lt;/h3&gt;

&lt;p&gt;Now we have the token representing the user input, it’s time to authenticate
it. The Security component provides an &lt;code class=&quot;highlighter-shiki&quot;&gt;AuthenticationManagerInterface&lt;/code&gt; for this.
By default, only one implementation of this interface is provided: The
&lt;code class=&quot;highlighter-shiki&quot;&gt;AuthenticationProviderManager&lt;/code&gt;. Its name is quite confusing, it’s not managing
&lt;em&gt;authentication providers&lt;/em&gt;, but it is the &lt;em&gt;authentication manager&lt;/em&gt; based on
&lt;em&gt;authentication providers&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-shiki&quot;&gt;AuthenticationProviderInterface&lt;/code&gt; classes do the hard work for this manager:
They transform an unauthenticated token into an authenticated token. In other
words, they transform user input into a security identity.&lt;/p&gt;

&lt;aside class=&quot;side&quot; data-type=&quot;Symfony internals&quot;&gt;
  &lt;p&gt;&lt;a href=&quot;https://github.com/symfony/security/tree/88588499b5c3ed78becea8e0c4ec8d81e0e4f483/Core/Authentication/Provider&quot;&gt;Other authentication providers&lt;/a&gt;
are for instance a &lt;code class=&quot;highlighter-shiki&quot;&gt;RememberMeAuthenticationProvider&lt;/code&gt; (authenticating a remember-me
cookie) and an &lt;code class=&quot;highlighter-shiki&quot;&gt;AnonymousAuthenticationProvider&lt;/code&gt; (which always returns a token
representing an anonymous user).&lt;/p&gt;
&lt;/aside&gt;

&lt;p&gt;The most commonly used provider is the &lt;code class=&quot;highlighter-shiki&quot;&gt;DaoAuthenticationProvider&lt;/code&gt; (&lt;strong&gt;D&lt;/strong&gt;ata
&lt;strong&gt;A&lt;/strong&gt;ccess &lt;strong&gt;O&lt;/strong&gt;bject). It uses a &lt;em&gt;user provider&lt;/em&gt; to find a user matching the
input from somewhere and then matches the password (using a &lt;em&gt;password encoder&lt;/em&gt;).&lt;/p&gt;

&lt;h3 id=&quot;set-up-some-user-resources-the-userprovider&quot;&gt;Set-up some User Resources: The UserProvider&lt;/h3&gt;

&lt;p&gt;To get things working, we first define a class able to load users from “some
resource”. In this case, we use the &lt;code class=&quot;highlighter-shiki&quot;&gt;InMemoryUserProvider&lt;/code&gt; that fetches users
from a PHP array.&lt;/p&gt;

&lt;aside class=&quot;side&quot; data-type=&quot;Symfony internals&quot;&gt;
  &lt;p&gt;&lt;a href=&quot;https://github.com/symfony/security/tree/88588499b5c3ed78becea8e0c4ec8d81e0e4f483/Core/User&quot;&gt;Other user providers&lt;/a&gt;
load users from a database or LDAP servers.&lt;/p&gt;
&lt;/aside&gt;

&lt;div class=&quot;language-php highlighter-shiki&quot;&gt;&lt;pre class=&quot;shiki-gutter&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;pre class=&quot;shiki-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot; data-linenr=&quot;1&quot;&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// secure.php&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;2&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;use&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; Symfony&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Component&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Security&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Core&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;User&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;InMemoryUserProvider&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;3&quot;&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;4&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;5&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;userProvider&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;InMemoryUserProvider&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;([&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;6&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt;wouter&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;[&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;7&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt;password&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt;pa$$word&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;8&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt;roles&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt;TITLE_SUPERVISOR&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;9&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;],&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;10&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;])&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;11&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;12&quot;&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// As an example of this class, let&amp;#39;s find the user:&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;13&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;wouterUser&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;userProvider&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;loadUserByUsername&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt;wouter&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;safety-first-encrypted-user-passwords&quot;&gt;Safety first: Encrypted User Passwords&lt;/h3&gt;

&lt;p&gt;Saving plain texts passwords is a no-go for web applications. They are often
encoded using for instance bcrypt or sha256. This is abstracted in &lt;em&gt;password
encoders&lt;/em&gt;. They are able to encode a plain text password and check whether the
password entered by the user was valid:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-shiki&quot;&gt;&lt;pre class=&quot;shiki-gutter&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
&lt;/pre&gt;&lt;pre class=&quot;shiki-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot; data-linenr=&quot;1&quot;&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// secure.php&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;2&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;use&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; Symfony&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Component&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Security&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Core&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Encoder&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;EncoderFactory&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;3&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;use&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; Symfony&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Component&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Security&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Core&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Encoder&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;PlaintextPasswordEncoder&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;4&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;use&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; Symfony&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Component&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Security&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Core&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;User&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;User&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;5&quot;&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;6&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;7&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;encoderFactory&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;EncoderFactory&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;([&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;8&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// we take the easiest road: plain text passwords&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;9&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;User&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;::class&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;PlaintextPasswordEncoder&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(),&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;10&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;])&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;11&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;12&quot;&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// First, get the encoder associated with our user (other users&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;13&quot;&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// can use other encoders).&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;14&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;encoderFactory&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;getEncoder&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;User&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;::class&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;15&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// Then, check whether some input matches our user&amp;#39;s password:&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;16&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;isPasswordValid&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;wouterUser&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;getPassword&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(),&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt;pa$$word&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;instantiating-the-authentication-manager&quot;&gt;Instantiating the Authentication Manager&lt;/h3&gt;

&lt;p&gt;Yay, it took quite some effort, but we’re ready to create the
&lt;code class=&quot;highlighter-shiki&quot;&gt;AuthenticationProviderManager&lt;/code&gt;!&lt;/p&gt;

&lt;aside class=&quot;side&quot; data-type=&quot;Symfony internals&quot;&gt;
  &lt;p&gt;If you look closely, the &lt;code class=&quot;highlighter-shiki&quot;&gt;&amp;#39;default&amp;#39;&lt;/code&gt; string is equal to the one provided in the
token: This is the &lt;em&gt;provider key&lt;/em&gt;. It is used to make sure the token is from
our application and also to know which provided should handle the token
(multiple providers might be able to handle a &lt;code class=&quot;highlighter-shiki&quot;&gt;UsernamePasswordToken&lt;/code&gt;).&lt;/p&gt;
&lt;/aside&gt;

&lt;div class=&quot;language-php highlighter-shiki&quot;&gt;&lt;pre class=&quot;shiki-gutter&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
&lt;/pre&gt;&lt;pre class=&quot;shiki-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot; data-linenr=&quot;1&quot;&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// secure.php&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;2&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;use&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; Symfony&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Component&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Security&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Core&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Authentication&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;AuthenticationProviderManager&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;3&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;use&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; Symfony&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Component&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Security&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Core&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Authentication&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Provider&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;DaoAuthenticationProvider&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;4&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;use&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; Symfony&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Component&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Security&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Core&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;User&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;UserChecker&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;5&quot;&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;6&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;7&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;authenticationManager&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;AuthenticationProviderManager&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;([&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;8&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;DaoAuthenticationProvider&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;9&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;userProvider&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;10&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;UserChecker&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(),&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;11&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt;default&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;12&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;encoderFactory&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;13&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;),&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;14&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;])&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As you see, there is one more class: The &lt;code class=&quot;highlighter-shiki&quot;&gt;UserChecker&lt;/code&gt;. It checks some “user
flags” after it is fetched from the user provider. This includes for instance
whether the user is activated, banned, etc.&lt;/p&gt;

&lt;h3 id=&quot;authenticating-the-token&quot;&gt;Authenticating the Token&lt;/h3&gt;

&lt;aside class=&quot;side&quot; data-type=&quot;Symfony internals&quot;&gt;
  &lt;p&gt;The firewall listeners of Http security also call the authenticate method
directly. See for instance the
&lt;a href=&quot;https://github.com/symfony/security/blob/88588499b5c3ed78becea8e0c4ec8d81e0e4f483/Http/Firewall/UsernamePasswordFormAuthenticationListener.php#L100&quot;&gt;&lt;code class=&quot;highlighter-shiki&quot;&gt;UsernamePasswordFormAuthenticationListener&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/aside&gt;

&lt;p&gt;Finally – we’re more than halfway the post now – we are able to authenticate
the token we created:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-shiki&quot;&gt;&lt;pre class=&quot;shiki-gutter&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;pre class=&quot;shiki-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot; data-linenr=&quot;1&quot;&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// secure.php&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;2&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;3&quot;&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;4&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;5&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;authenticatedToken&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;authenticationManager&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;authenticate&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;inputToken&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;6&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;7&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;echo&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt;Hello &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;authenticatedToken&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;getUsername&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt;!&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;authorize-actions-the-accessdecisionmanager&quot;&gt;Authorize Actions: The AccessDecisionManager&lt;/h2&gt;

&lt;aside class=&quot;side&quot; data-type=&quot;Symfony internals&quot;&gt;
  &lt;p&gt;Symfony security started as a direct port of JAVA’s &lt;a href=&quot;https://spring.io/projects/spring-security&quot;&gt;Spring
Security&lt;/a&gt;. This is why the naming
is often quite different from the rest of Symfony. It however, gives you two
documentations to understand Security!&lt;/p&gt;
&lt;/aside&gt;

&lt;p&gt;Now we’ve authenticated the user input and the Security system validated our
input, it’s time to answer the &lt;em&gt;Are you allowe to do this?&lt;/em&gt; question. Let me
introduce you to yet another “manager”: &lt;code class=&quot;highlighter-shiki&quot;&gt;AccessDecisionManagerInterface&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The default implementation uses “Security voters” to decide whether the user is
allowed to execute an action. These voters are provided with an &lt;em&gt;attribute&lt;/em&gt;
(representing the action) and optionally some context (i.e. the subject of the
action).&lt;/p&gt;

&lt;aside class=&quot;side&quot; data-type=&quot;Symfony internals&quot;&gt;
  &lt;p&gt;In the Http component, an &lt;a href=&quot;https://github.com/symfony/security/blob/88588499b5c3ed78becea8e0c4ec8d81e0e4f483/Http/Firewall/AccessListener.php&quot;&gt;&lt;code class=&quot;highlighter-shiki&quot;&gt;AccessListener&lt;/code&gt;&lt;/a&gt;
checks access using this manager based on the configured &lt;code class=&quot;highlighter-shiki&quot;&gt;access_control&lt;/code&gt;
rules.&lt;/p&gt;
&lt;/aside&gt;

&lt;div class=&quot;language-php highlighter-shiki&quot;&gt;&lt;pre class=&quot;shiki-gutter&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;pre class=&quot;shiki-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot; data-linenr=&quot;1&quot;&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// secure.php&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;2&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;use&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; Symfony&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Component&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Security&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Core&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Authorization&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;AccessDecisionManager&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;3&quot;&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;4&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;5&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;accessDecisionManager&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;AccessDecisionManager&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;([&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;6&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// ... voters&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;7&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;])&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The default voters of Symfony are a bit strange, they don’t validate an action,
but validate the user’s identity. One of them is the &lt;code class=&quot;highlighter-shiki&quot;&gt;RoleVoter&lt;/code&gt;. It checks
whether &lt;code class=&quot;highlighter-shiki&quot;&gt;User#getRoles()&lt;/code&gt; contains the provided attribute:&lt;/p&gt;

&lt;aside class=&quot;side&quot; data-type=&quot;Symfony internals&quot;&gt;
  &lt;p&gt;A &lt;code class=&quot;highlighter-shiki&quot;&gt;RoleHierarchyVoter&lt;/code&gt; is also provided, which understands hierarchies in
roles (i.e. “admin is a user”). &lt;a href=&quot;https://github.com/symfony/security/tree/88588499b5c3ed78becea8e0c4ec8d81e0e4f483/Core/Authorization/Voter&quot;&gt;Another default voter&lt;/a&gt;
is the &lt;code class=&quot;highlighter-shiki&quot;&gt;AuthenticatedVoter&lt;/code&gt;, which checks if the token is fully authenticated,
anonymous, etc.&lt;/p&gt;
&lt;/aside&gt;

&lt;div class=&quot;language-php highlighter-shiki&quot;&gt;&lt;pre class=&quot;shiki-gutter&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
&lt;/pre&gt;&lt;pre class=&quot;shiki-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot; data-linenr=&quot;1&quot;&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// secure.php&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;2&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;use&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; Symfony&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Component&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Security&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Core&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Authorization&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Voter&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;RoleVoter&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;3&quot;&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;4&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;5&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;accessDecisionManager&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;AccessDecisionManager&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;([&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;6&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// TITLE_ is the prefix an attribute must have in order to be&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;7&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// managed by this voter&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;8&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;RoleVoter&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt;TITLE_&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;),&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;9&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;])&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;10&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;11&quot;&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// now we can use the access decision manager to see if the&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;12&quot;&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// authenticated token has the &amp;quot;supervisor&amp;quot; role:&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;13&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;isSupervisor&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;accessDecisionManager&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;decide&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;14&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;authenticatedToken&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;15&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt;TITLE_SUPERVISOR&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;16&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;17&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;18&quot;&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// If we add a custom voter, we would be able to i.e. test if we are&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;19&quot;&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// able to view a user&amp;#39;s profile:&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;20&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;canViewProfile&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;accessDecisionManager&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;decide&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;21&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;authenticatedToken&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;22&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt;VIEW&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;],&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;23&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;authenticatedToken&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;getUser&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// some context for the &amp;quot;view&amp;quot; action&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;24&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;relation-with-the-symfony-framework&quot;&gt;Relation with the Symfony Framework&lt;/h2&gt;

&lt;p&gt;Now, if we take a look at the configuration for the SecurityBundle, we’ll find
many relations with the architecture used above:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-shiki&quot;&gt;&lt;pre class=&quot;shiki-gutter&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
&lt;/pre&gt;&lt;pre class=&quot;shiki-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot; data-linenr=&quot;1&quot;&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;security&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;2&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;# Providers: UserProvider classes&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;3&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;providers&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;4&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;in_memory&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;5&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;# indicating the InMemoryUserProvider&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;6&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;memory&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;~&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;7&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;8&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;# The UserPasswordEncoders&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;9&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;encoders&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;10&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;Symfony\Component\Security\Core\User\UserInterface&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt;plaintext&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;11&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;12&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;# Firewalls are listeners of the HTTP component that&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;13&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;# execute authentication based on paths&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;14&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;firewalls&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;15&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;# ...&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;16&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;17&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;# Each firewall configures a list of authentication providers&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;18&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;# used for this AuthenticationProviderManager. I.e. all&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;19&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;# firewalls are one AuthenticationProviderManager (and thus,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;20&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;# one security system).&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;21&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;main&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;22&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;# AnonymousAuthenticationProvider&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;23&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;anonymous&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;true&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;24&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;25&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;# Use UsernamePasswordToken and DaoAuthenticationProvider&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;26&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;http_basic&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;true&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;27&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;form_login&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;true&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;28&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;29&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;# Relate to AccessDecisionManager#isGranted() calls for&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;30&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;# specific paths&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;31&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;access_control&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;32&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;path&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt;^/admin&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;roles&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt;ROLE_ADMIN&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;33&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;path&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt;^/profile&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;roles&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt;ROLE_USER&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;take-homes&quot;&gt;Take Home’s&lt;/h2&gt;

&lt;p&gt;I hope this posts has provided you some insights in how the Security component
works.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Security HTTP is only a small layer converting HTTP requests into input for
the Security system&lt;/li&gt;
  &lt;li&gt;There are many similarities between the config in the Symfony framework and
the workings of the Security Core component&lt;/li&gt;
  &lt;li&gt;A complete working implementation of the Security component can be achieved
in 20 lines of PHP&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this posts, you might have also observed some weird things. I’ll go into
further detail on them in later posts.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;There is no build-in authorization for API tokens&lt;/li&gt;
  &lt;li&gt;The token representing user input is the same as the authenticated token&lt;/li&gt;
  &lt;li&gt;Authorization by default is on the &lt;em&gt;identity&lt;/em&gt; rather than the &lt;em&gt;action&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Wouter de Jong</name></author><category term="article" /><category term="symfony" /><category term="security" /><summary type="html">Setting up big Symfony components in a blank PHP project helps a lot to understand it. You’ll grasp the main architecture of the component much easier this way. Let’s try to understand Symfony Security by doing exactly this!</summary></entry><entry><title type="html">Symfony Security: Is Security about User management?</title><link href="https://wouterj.nl/2019/03/security-removing-user" rel="alternate" type="text/html" title="Symfony Security: Is Security about User management?" /><published>2019-03-11T00:00:00+00:00</published><updated>2019-03-11T00:00:00+00:00</updated><id>https://wouterj.nl/2019/03/security-removing-user</id><content type="html" xml:base="https://wouterj.nl/2019/03/security-removing-user">&lt;p&gt;Symfony 2 completely renewed Symfony. Symfony 3 gave us a completely refactored
and improved Form component. Symfony 4 gave us a renewed dependency injection
experience. Let’s fix Security in Symfony 5! To start with: The concept of
users in security.&lt;/p&gt;

&lt;p&gt;The Security guide has 36 official documentation articles. This means it’s
by far record holder. The Dependency Injection component is on place two with
just 26 articles. Also, a book about Security is in &lt;a href=&quot;https://leanpub.com/bookstore/type/book/sort/lifetime_earnings?search=symfony&quot;&gt;leanpub’s top selling
Symfony list&lt;/a&gt; (congratz &lt;a href=&quot;https://leanpub.com/u/jaytaph&quot;&gt;Joshua&lt;/a&gt;!). The Security component
needs fixing! &lt;em&gt;What can we do?&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;whats-the-problem&quot;&gt;What’s the problem?&lt;/h2&gt;

&lt;p&gt;Users are &lt;em&gt;your&lt;/em&gt; domain logic. Yet, the component forces your user to implement
&lt;code class=&quot;highlighter-shiki&quot;&gt;UserInterface&lt;/code&gt;. This requires you to define a &lt;em&gt;salt&lt;/em&gt; (mostly empty),
&lt;em&gt;username&lt;/em&gt; (probably &lt;code class=&quot;highlighter-shiki&quot;&gt;return $this-&amp;gt;getEmail();&lt;/code&gt;) and &lt;em&gt;password&lt;/em&gt; (I hope you
aren’t using tokens in your API?).&lt;/p&gt;

&lt;aside class=&quot;side&quot; data-type=&quot;Reference&quot;&gt;
  &lt;p&gt;In the blogpost, Iltar van der Berg uses two objects: A domain &lt;code class=&quot;highlighter-shiki&quot;&gt;User&lt;/code&gt; and
&lt;code class=&quot;highlighter-shiki&quot;&gt;SecurityUser&lt;/code&gt;. The security user provider creates a &lt;code class=&quot;highlighter-shiki&quot;&gt;SecurityUser&lt;/code&gt; based on
information from the domain &lt;code class=&quot;highlighter-shiki&quot;&gt;User&lt;/code&gt;. This way, the domain &lt;code class=&quot;highlighter-shiki&quot;&gt;User&lt;/code&gt; becomes
decoupled from the Security component.&lt;/p&gt;
&lt;/aside&gt;

&lt;p&gt;You can &lt;a href=&quot;https://stovepipe.systems/post/decoupling-your-security-user&quot;&gt;decouple the security user from your domain one&lt;/a&gt;.
Yet, doing so means that you have to write a custom service to get the
domain user in your controller/services. All Security &lt;code class=&quot;highlighter-shiki&quot;&gt;getUser()&lt;/code&gt; methods will
return the Security user and not the domain one. That means writing custom core
functionality to fix a problem in the component.&lt;/p&gt;

&lt;h3 id=&quot;what-is-security-without-a-user&quot;&gt;What is Security without a User?&lt;/h3&gt;

&lt;p&gt;A lot actually. The core of the Security component needs no users. &lt;em&gt;Token&lt;/em&gt;
objects (not related to API tokens) contain all necessary information about the
user. After authentication, the user object is saved in this token, together
with the credentials and the roles.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/security1-current-uml.png&quot; alt=&quot;User and Token UML diagram&quot; /&gt;&lt;/p&gt;

&lt;aside class=&quot;side&quot; data-type=&quot;Symfony internals&quot;&gt;
  &lt;p&gt;The Security component consists of separate layers. The &lt;em&gt;Core
subcomponent&lt;/em&gt; contains the generic Security objects and abstractions. The &lt;em&gt;Http
subcomponent&lt;/em&gt; integrates this Core system with the HTTP world of requests,
sessions and login forms. Learn more about this in &lt;a href=&quot;https://www.youtube.com/watch?v=xQyEXzug7P8&quot;&gt;this great talk from Kris
Wallsmith&lt;/a&gt;.&lt;/p&gt;
&lt;/aside&gt;

&lt;p&gt;At this point, you might wonder why there are two objects: Token and User.
They both contain the username, user roles and password… I agree, we can
remove one of the two concepts.&lt;/p&gt;

&lt;p&gt;The user object also creates another problem: The user object is part of the
authenticated token. This means it’s serialized when the token is stored in the
session. This means your user object has to be serializable: It needs to remove
plain text passwords, resources and other stuff you don’t want to serialize.&lt;/p&gt;

&lt;h2 id=&quot;is-there-a-way-to-fix-it&quot;&gt;Is there a way to fix it?&lt;/h2&gt;

&lt;p&gt;Yes: remove users. Wait, whaat?! Security is all about getting a user, right?
Well, I don’t think so. Security is about securing your resources (pages,
files, etc.). That’s all security should provide as a base. To do this, a
unique identifier is needed to identify who is asking permission to access.
This means we get the user feature as a very nice bonus, but it isn’t the main
goal of Security.&lt;/p&gt;

&lt;p&gt;With that in mind, I’ve described why users cause problems. I’ve also already
shown what other unique identifer Security has besides the User object: Tokens.
Actually, everything Security needs is already in these tokens, so no need for
user objects in the component!&lt;/p&gt;

&lt;p&gt;However, being able to typehint for &lt;code class=&quot;highlighter-shiki&quot;&gt;UserInterface&lt;/code&gt; in the controller is great.
Removing users from the component make this is impossible: The Security
component can no longer relate the token with a user object that you created.&lt;/p&gt;

&lt;p&gt;To fix this, tokens can save a plain text identifier for the user. You can set
this to the id of your domain user. The component can provide some automatic
loaders of this Client entity based on the ID, like the current user
providers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/security1-proposed-uml.png&quot; alt=&quot;Proposed UML diagram&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-does-this-impact-my-code&quot;&gt;How does this Impact my Code?&lt;/h2&gt;

&lt;p&gt;As a base, this means your user object does no longer contain anything from the
Security component.&lt;/p&gt;

&lt;h4 id=&quot;before&quot;&gt;Before&lt;/h4&gt;

&lt;div class=&quot;language-php highlighter-shiki&quot;&gt;&lt;pre class=&quot;shiki-gutter&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
&lt;/pre&gt;&lt;pre class=&quot;shiki-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot; data-linenr=&quot;1&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;use&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; Symfony&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Component&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Security&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Core&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;User&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;UserInterface&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;2&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;3&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;ApiUser&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;implements&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;UserInterface&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;4&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;5&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;email&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;6&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;roles&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;7&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;8&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;__construct&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;email&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;array&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;roles&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;9&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;10&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;email&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;email&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;11&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;roles&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;roles&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;12&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;13&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;14&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;getUsername&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;15&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;16&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;email&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;17&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;18&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;19&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;getPassword&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;20&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;21&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt;none&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;22&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;23&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;24&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;getSalt&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;25&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;26&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;null;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;27&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;28&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;29&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;getRoles&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;30&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;31&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;roles&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;32&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;33&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;34&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;35&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;after&quot;&gt;After&lt;/h4&gt;

&lt;div class=&quot;language-php highlighter-shiki&quot;&gt;&lt;pre class=&quot;shiki-gutter&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
&lt;/pre&gt;&lt;pre class=&quot;shiki-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot; data-linenr=&quot;1&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;User&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;2&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;3&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;email&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;4&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;roles&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;5&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;6&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;__construct&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;email&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;roles&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;7&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;8&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;email&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;email&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;9&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;roles&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;roles&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;10&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;11&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;12&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;getEmail&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;13&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;14&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;email&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;15&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;16&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;17&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;getRoles&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;18&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;19&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;roles&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;20&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;21&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When you want to use &lt;code class=&quot;highlighter-shiki&quot;&gt;getUser()&lt;/code&gt; functions, you only have to implement a simple
interface:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-shiki&quot;&gt;&lt;pre class=&quot;shiki-gutter&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;pre class=&quot;shiki-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot; data-linenr=&quot;1&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;use&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; Symfony&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Component&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Security&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Core&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;IdentityInterface&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;2&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;3&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;User&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;implements&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;IdentityInterface&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;4&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;5&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;6&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;7&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;getIdentifier&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;8&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;9&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;10&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;11&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As you can see, this all becomes way more flexible. Your user only needs to
have some unique identifier and all other information is in the tokens.&lt;/p&gt;

&lt;p&gt;The benefit of this is that the Security component only needs to serialize the token
in the session. This means your user object or whatsoever doesn’t need to be
serializable, doesn’t need to erase credentials, cetera.&lt;/p&gt;

&lt;h2 id=&quot;take-homes&quot;&gt;Take Home’s&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Security isn’t about the user&lt;/li&gt;
  &lt;li&gt;Users are &lt;em&gt;your domain&lt;/em&gt;, a framework should not interfere with that&lt;/li&gt;
  &lt;li&gt;Identifiers link objects with the same meaning&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, this post is just proposing ideas. I’m sure there will be
difficulties to integrate this into the Symfony code. But I believe it is
necessary to rethink what’s needed in the Symfony Security component.
Integrating the Security component should be easier. Reducing classes that need
to be modified to use Security helps with this.&lt;/p&gt;</content><author><name>Wouter de Jong</name></author><category term="experiment" /><category term="symfony" /><category term="security" /><summary type="html">Symfony 2 completely renewed Symfony. Symfony 3 gave us a completely refactored and improved Form component. Symfony 4 gave us a renewed dependency injection experience. Let’s fix Security in Symfony 5! To start with: The concept of users in security.</summary></entry><entry><title type="html">Repositories are just Collections</title><link href="https://wouterj.nl/2016/12/repositories-are-collections" rel="alternate" type="text/html" title="Repositories are just Collections" /><published>2016-12-15T00:00:00+00:00</published><updated>2016-12-15T00:00:00+00:00</updated><id>https://wouterj.nl/2016/12/repositories-are-collections</id><content type="html" xml:base="https://wouterj.nl/2016/12/repositories-are-collections">&lt;p&gt;Repositories are just collections of things. A post repository is a collection
of posts, a user repository a collection of users. They allow to abstract away
all the persistence details. Yet, many people think of Doctrine repositories as
purely related to Doctrine, leading to strange abstractions. Let’s create a
normal collection with Symfony and Doctrine today!&lt;/p&gt;

&lt;h2 id=&quot;it-all-starts-with-the-interface&quot;&gt;It all starts with the Interface&lt;/h2&gt;

&lt;p&gt;When designing your application, start with designing your interfaces. If you
like your interfaces, the implementation will probably be nice as well. In this
post, we’re going to design a collection of products. The interface first
contains some basic collection methods:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-shiki&quot;&gt;&lt;pre class=&quot;shiki-gutter&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
&lt;/pre&gt;&lt;pre class=&quot;shiki-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot; data-linenr=&quot;1&quot;&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// src/AppBundle/Product/ProductRepository.php&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;2&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;namespace&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; AppBundle&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Product&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;3&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;4&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;interface&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; ProductRepository &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;extends&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;Countable&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;5&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;6&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;/** @return &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2; font-style: italic&quot;&gt;Product&lt;/span&gt;&lt;span style=&quot;color: #E5673D; font-style: italic&quot;&gt;[]&lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt; */&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;7&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;all&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;8&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;9&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;/** @return &lt;/span&gt;&lt;span style=&quot;color: #E5673D; font-style: italic&quot;&gt;bool&lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt; */&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;10&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;includes&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;Product&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;product&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;11&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;12&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;/** @return &lt;/span&gt;&lt;span style=&quot;color: #E5673D; font-style: italic&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt; */&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;13&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;count&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;14&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can now count the number of products in the collection, get all products in
the collection and check if a product is included in the collection. Now, let’s
add two simple methods for more specific operations on this collection:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-shiki&quot;&gt;&lt;pre class=&quot;shiki-gutter&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;pre class=&quot;shiki-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot; data-linenr=&quot;1&quot;&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// src/AppBundle/Product/ProductRepository.php&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;2&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;3&quot;&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;4&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;interface&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; ProductRepository &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;extends&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;Countable&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;5&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;6&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;7&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;add&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;Product&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;product&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;8&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;9&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;/** @return &lt;/span&gt;&lt;span style=&quot;color: #E5673D; font-style: italic&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;color: #999999; font-style: italic&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2; font-style: italic&quot;&gt;Product&lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt; */&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;10&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;byId&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;11&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;a-basic-implementation&quot;&gt;A Basic Implementation&lt;/h2&gt;

&lt;p&gt;The most straight-forward way to implement collections in PHP is by using
arrays. Let’s create an array based product collection:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-shiki&quot;&gt;&lt;pre class=&quot;shiki-gutter&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
&lt;/pre&gt;&lt;pre class=&quot;shiki-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot; data-linenr=&quot;1&quot;&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// src/AppBundle/Product/ArrayBasedProductRepository.php&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;2&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;namespace&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; AppBundle&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Product&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;3&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;4&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;ArrayBasedProductRepository&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;implements&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;ProductRepository&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;5&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;6&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;products&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;[]&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;7&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;8&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;all&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;9&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;10&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;products&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;11&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;12&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;13&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;includes&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;Product&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;product&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;14&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;15&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;in_array&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;product&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;products&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;16&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;17&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;18&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;count&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;19&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;20&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;count&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;products&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;21&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;22&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;23&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;add&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;Product&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;product&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;24&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;25&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;products&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;product&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;getId&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;()]&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;product&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;26&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;27&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;28&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;byId&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;29&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;30&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;!isset&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;products&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;]))&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;31&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;null;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;32&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;33&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;34&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;products&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;35&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;36&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Most of the methods in the interface can be mapped to simple PHP array
methods. This repository can be defined as a service:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-shiki&quot;&gt;&lt;pre class=&quot;shiki-gutter&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;pre class=&quot;shiki-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot; data-linenr=&quot;1&quot;&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;# app/config/services.yml&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;2&quot;&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;services&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;3&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;app.product_repository&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;4&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt;AppBundle\Product\ArrayBasedProductRepository&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then you can probably imagine how we would use this product collection in a
controller:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-shiki&quot;&gt;&lt;pre class=&quot;shiki-gutter&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
&lt;/pre&gt;&lt;pre class=&quot;shiki-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot; data-linenr=&quot;1&quot;&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// src/AppBundle/Controller/ShopController.php&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;2&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;namespace&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; AppBundle&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Controller&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;3&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;4&quot;&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;5&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;ShopController&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;extends&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;Controller&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;6&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;7&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;listAction&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;8&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;9&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;products&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;get&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt;app.product_repository&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;all&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;10&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;11&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;render&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt;shop/products.twig&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;[&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;12&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt;products&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;products&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;13&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;])&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;14&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;15&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;16&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;productInfoAction&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;productId&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;17&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;18&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;product&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;get&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt;app.product_repository&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;byId&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;productId&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;19&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;20&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;render&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt;shop/product_info.twig&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;[&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;21&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt;product&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;product&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;22&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;])&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;23&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;24&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;using-doctrine&quot;&gt;Using Doctrine&lt;/h2&gt;

&lt;p&gt;So far, we’ve only looked at normal repositories. I hope this brought the point
across that repositories are just collections. The nice thing about
repositories is that we can implement all sort of different backends for our
collections. As this post is also about Doctrine, let’s create a product
collection based on Doctrine.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-shiki&quot;&gt;EntityRepository&lt;/code&gt; shipped with the Doctrine ORM is a simple wrapper class
around the entity manager and the unit of work. The class isn’t used in
Doctrine itself, it’s purely an easy starting point for the users. This means
we can completely drop it and base our doctrine collection on top of the entity
manager:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-shiki&quot;&gt;&lt;pre class=&quot;shiki-gutter&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
&lt;/pre&gt;&lt;pre class=&quot;shiki-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot; data-linenr=&quot;1&quot;&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// src/AppBundle/Product/DoctrineBasedProductRepository.php&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;2&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;namespace&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; AppBundle&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;Product&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;3&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;4&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;use&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; Doctrine&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;ORM&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;EntityManager&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;5&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;6&quot;&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;DoctrineBasedProductRepository&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;implements&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;ProductRepository&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;7&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;8&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;entityManager&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;9&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;10&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;__construct&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;EntityManager&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;entityManager&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;11&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;12&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;entityManager&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;entityManager&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;13&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;14&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;15&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;all&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;16&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;17&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// Create a basic DQL query to fetch all entities&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;18&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;entityManager&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;createQuery&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;SELECT&lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt; p &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;FROM&lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;Product&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;::class&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt; p&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;19&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;getResult&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;20&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;21&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;22&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;includes&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;Product&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;product&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;23&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;24&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// Check if the entity is managed by the entity manager&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;25&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;entityManager&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;contains&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;product&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;26&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;27&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;28&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;count&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;29&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;30&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// Create a basic count DQL query&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;31&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;entityManager&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;createQuery&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;SELECT&lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;count&lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt;(p) &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;FROM&lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;Product&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;::class&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt; p&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;32&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;getSingleScalarResult&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;33&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;34&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;35&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;add&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;Product&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;product&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;36&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;37&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;entityManager&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;persist&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;product&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;38&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;39&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;40&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;byId&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;41&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;42&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;// Fetch a product by id (note: No need to use DQL or the EntityRepository here either!)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;43&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;entityManager&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;find&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;Product&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;::class&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #D8DEE9&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #E5673D&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;44&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;45&quot;&gt;&lt;span style=&quot;color: #999999&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As you can see, the code in here is just a bit more complex than using the
array repository. Even better, the usage of this repository has not changed a
single bit when comparing it with the &lt;code class=&quot;highlighter-shiki&quot;&gt;ArrayBasedProductRepository&lt;/code&gt;. So we only
have to update the service definitions to use doctrine:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-shiki&quot;&gt;&lt;pre class=&quot;shiki-gutter&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;pre class=&quot;shiki-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot; data-linenr=&quot;1&quot;&gt;&lt;span style=&quot;color: #6B90C0; font-style: italic&quot;&gt;# app/config/services.yml&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;2&quot;&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;services&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;3&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;app.product_repository&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;4&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt;AppBundle\Product\DoctrineBasedProductRepository&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot; data-linenr=&quot;5&quot;&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #C7C8D2&quot;&gt;arguments&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #BBBBBB&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #7CC64A&quot;&gt;@doctrine.orm.entity_manager&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #999999&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;treat-repositories-as-collections&quot;&gt;Treat Repositories as Collections&lt;/h2&gt;

&lt;p&gt;As I tried to show in this post, treating repositories as collections has some
significant advantages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The collection implementation is abstracted away, not much hassle with
Doctrine anymore&lt;/li&gt;
  &lt;li&gt;All collection methods are located in one class/service. This means you
never has to rely on both the entity repository and manager (in order to
fetch and persist) anymore&lt;/li&gt;
  &lt;li&gt;Working with Doctrine as if it’s a collection makes programming easier to
follow&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My last warning of this post is to not add non-collection related methods in
the repository. I sometimes see people adding &lt;code class=&quot;highlighter-shiki&quot;&gt;getXxxQuery()&lt;/code&gt; methods in the
repository, as e.g. the form type requires you to set a query. These methods
tell something about the implementation. They are no longer related to
collections (try to think what this method should return in the
&lt;code class=&quot;highlighter-shiki&quot;&gt;ArrayBasedProductRepository&lt;/code&gt;).&lt;/p&gt;

&lt;h2 id=&quot;take-homes&quot;&gt;Take Home’s&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-shiki&quot;&gt;EntityRepository&lt;/code&gt; class shipped by Doctrine is purely to ease usage,
it’s not mandatory at all&lt;/li&gt;
  &lt;li&gt;Writing your own repositories allow you to abstract away Doctrine almost
completely from your services and controllers&lt;/li&gt;
  &lt;li&gt;Repositories are just collections, please treat them as such&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Wouter de Jong</name></author><category term="article" /><category term="symfony" /><category term="doctrine" /><category term="oop" /><summary type="html">Repositories are just collections of things. A post repository is a collection of posts, a user repository a collection of users. They allow to abstract away all the persistence details. Yet, many people think of Doctrine repositories as purely related to Doctrine, leading to strange abstractions. Let’s create a normal collection with Symfony and Doctrine today!</summary></entry></feed>